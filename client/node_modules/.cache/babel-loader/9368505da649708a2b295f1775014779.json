{"ast":null,"code":"'use strict';\n\nconst Domain = require('./domain');\n\nconst Email = require('./email');\n\nconst Tlds = require('./tlds');\n\nconst internals = {\n  defaultTlds: {\n    allow: Tlds,\n    deny: null\n  }\n};\nmodule.exports = {\n  domain: {\n    analyze(domain, options) {\n      options = internals.options(options);\n      return Domain.analyze(domain, options);\n    },\n\n    isValid(domain, options) {\n      options = internals.options(options);\n      return Domain.isValid(domain, options);\n    }\n\n  },\n  email: {\n    analyze(email, options) {\n      options = internals.options(options);\n      return Email.analyze(email, options);\n    },\n\n    isValid(email, options) {\n      options = internals.options(options);\n      return Email.isValid(email, options);\n    }\n\n  }\n};\n\ninternals.options = function (options) {\n  if (!options) {\n    return {\n      tlds: internals.defaultTlds\n    };\n  }\n\n  if (options.tlds === false) {\n    // Defaults to true\n    return options;\n  }\n\n  if (!options.tlds || options.tlds === true) {\n    return Object.assign({}, options, {\n      tlds: internals.defaultTlds\n    });\n  }\n\n  if (typeof options.tlds !== 'object') {\n    throw new Error('Invalid options: tlds must be a boolean or an object');\n  }\n\n  if (options.tlds.deny) {\n    if (options.tlds.deny instanceof Set === false) {\n      throw new Error('Invalid options: tlds.deny must be a Set object');\n    }\n\n    if (options.tlds.allow) {\n      throw new Error('Invalid options: cannot specify both tlds.allow and tlds.deny lists');\n    }\n\n    return options;\n  }\n\n  if (options.tlds.allow === true) {\n    return Object.assign({}, options, {\n      tlds: internals.defaultTlds\n    });\n  }\n\n  if (options.tlds.allow instanceof Set === false) {\n    throw new Error('Invalid options: tlds.allow must be a Set object or true');\n  }\n\n  return options;\n};","map":{"version":3,"sources":["C:/Users/Asus A455L/portfolio-rizky/portfolio2/client/node_modules/@hapi/address/lib/index.js"],"names":["Domain","require","Email","Tlds","internals","defaultTlds","allow","deny","module","exports","domain","analyze","options","isValid","email","tlds","Object","assign","Error","Set"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Domain = require('./domain');\nconst Email = require('./email');\nconst Tlds = require('./tlds');\n\n\nconst internals = {\n    defaultTlds: { allow: Tlds, deny: null }\n};\n\n\nmodule.exports = {\n    domain: {\n        analyze(domain, options) {\n\n            options = internals.options(options);\n            return Domain.analyze(domain, options);\n        },\n\n        isValid(domain, options) {\n\n            options = internals.options(options);\n            return Domain.isValid(domain, options);\n        }\n    },\n    email: {\n        analyze(email, options) {\n\n            options = internals.options(options);\n            return Email.analyze(email, options);\n        },\n\n        isValid(email, options) {\n\n            options = internals.options(options);\n            return Email.isValid(email, options);\n        }\n    }\n};\n\n\ninternals.options = function (options) {\n\n    if (!options) {\n        return { tlds: internals.defaultTlds };\n    }\n\n    if (options.tlds === false) {                // Defaults to true\n        return options;\n    }\n\n    if (!options.tlds ||\n        options.tlds === true) {\n\n        return Object.assign({}, options, { tlds: internals.defaultTlds });\n    }\n\n    if (typeof options.tlds !== 'object') {\n        throw new Error('Invalid options: tlds must be a boolean or an object');\n    }\n\n    if (options.tlds.deny) {\n        if (options.tlds.deny instanceof Set === false) {\n            throw new Error('Invalid options: tlds.deny must be a Set object');\n        }\n\n        if (options.tlds.allow) {\n            throw new Error('Invalid options: cannot specify both tlds.allow and tlds.deny lists');\n        }\n\n        return options;\n    }\n\n    if (options.tlds.allow === true) {\n        return Object.assign({}, options, { tlds: internals.defaultTlds });\n    }\n\n    if (options.tlds.allow instanceof Set === false) {\n        throw new Error('Invalid options: tlds.allow must be a Set object or true');\n    }\n\n    return options;\n};\n"]},"metadata":{},"sourceType":"script"}