{"ast":null,"code":"'use strict';\n\nconst internals = {};\nexports.errors = {\n  root: 'value',\n  key: '\"{{!label}}\" ',\n  messages: {\n    wrapArrays: true\n  },\n  any: {\n    unknown: 'is not allowed',\n    invalid: 'contains an invalid value',\n    empty: 'is not allowed to be empty',\n    required: 'is required',\n    allowOnly: 'must be one of {{valids}}',\n    default: 'threw an error when running default method'\n  },\n  alternatives: {\n    base: 'not matching any of the allowed alternatives',\n    child: null\n  },\n  array: {\n    base: 'must be an array',\n    includes: 'at position {{pos}} does not match any of the allowed types',\n    includesSingle: 'single value of \"{{!label}}\" does not match any of the allowed types',\n    includesOne: 'at position {{pos}} fails because {{reason}}',\n    includesOneSingle: 'single value of \"{{!label}}\" fails because {{reason}}',\n    includesRequiredUnknowns: 'does not contain {{unknownMisses}} required value(s)',\n    includesRequiredKnowns: 'does not contain {{knownMisses}}',\n    includesRequiredBoth: 'does not contain {{knownMisses}} and {{unknownMisses}} other required value(s)',\n    excludes: 'at position {{pos}} contains an excluded value',\n    excludesSingle: 'single value of \"{{!label}}\" contains an excluded value',\n    hasKnown: 'does not contain at least one required match for type \"{{!patternLabel}}\"',\n    hasUnknown: 'does not contain at least one required match',\n    min: 'must contain at least {{limit}} items',\n    max: 'must contain less than or equal to {{limit}} items',\n    length: 'must contain {{limit}} items',\n    ordered: 'at position {{pos}} fails because {{reason}}',\n    orderedLength: 'at position {{pos}} fails because array must contain at most {{limit}} items',\n    ref: 'references \"{{ref}}\" which is not a positive integer',\n    sparse: 'must not be a sparse array',\n    unique: 'position {{pos}} contains a duplicate value'\n  },\n  boolean: {\n    base: 'must be a boolean'\n  },\n  binary: {\n    base: 'must be a buffer or a string',\n    min: 'must be at least {{limit}} bytes',\n    max: 'must be less than or equal to {{limit}} bytes',\n    length: 'must be {{limit}} bytes'\n  },\n  date: {\n    base: 'must be a number of milliseconds or valid date string',\n    strict: 'must be a valid date',\n    min: 'must be larger than or equal to \"{{limit}}\"',\n    max: 'must be less than or equal to \"{{limit}}\"',\n    less: 'must be less than \"{{limit}}\"',\n    greater: 'must be greater than \"{{limit}}\"',\n    isoDate: 'must be a valid ISO 8601 date',\n    timestamp: {\n      javascript: 'must be a valid timestamp or number of milliseconds',\n      unix: 'must be a valid timestamp or number of seconds'\n    },\n    ref: 'references \"{{ref}}\" which is not a date'\n  },\n  function: {\n    base: 'must be a Function',\n    arity: 'must have an arity of {{n}}',\n    minArity: 'must have an arity greater or equal to {{n}}',\n    maxArity: 'must have an arity lesser or equal to {{n}}',\n    ref: 'must be a Joi reference',\n    class: 'must be a class'\n  },\n  lazy: {\n    base: '!!schema error: lazy schema must be set',\n    schema: '!!schema error: lazy schema function must return a schema'\n  },\n  object: {\n    base: 'must be an object',\n    child: '!!child \"{{!child}}\" fails because {{reason}}',\n    min: 'must have at least {{limit}} children',\n    max: 'must have less than or equal to {{limit}} children',\n    length: 'must have {{limit}} children',\n    allowUnknown: '!!\"{{!child}}\" is not allowed',\n    with: '!!\"{{mainWithLabel}}\" missing required peer \"{{peerWithLabel}}\"',\n    without: '!!\"{{mainWithLabel}}\" conflict with forbidden peer \"{{peerWithLabel}}\"',\n    missing: 'must contain at least one of {{peersWithLabels}}',\n    xor: 'contains a conflict between exclusive peers {{peersWithLabels}}',\n    oxor: 'contains a conflict between optional exclusive peers {{peersWithLabels}}',\n    and: 'contains {{presentWithLabels}} without its required peers {{missingWithLabels}}',\n    nand: '!!\"{{mainWithLabel}}\" must not exist simultaneously with {{peersWithLabels}}',\n    assert: '!!\"{{ref}}\" validation failed because \"{{ref}}\" failed to {{message}}',\n    rename: {\n      multiple: 'cannot rename child \"{{from}}\" because multiple renames are disabled and another key was already renamed to \"{{to}}\"',\n      override: 'cannot rename child \"{{from}}\" because override is disabled and target \"{{to}}\" exists',\n      regex: {\n        multiple: 'cannot rename children {{from}} because multiple renames are disabled and another key was already renamed to \"{{to}}\"',\n        override: 'cannot rename children {{from}} because override is disabled and target \"{{to}}\" exists'\n      }\n    },\n    type: 'must be an instance of \"{{type}}\"',\n    schema: 'must be a Joi instance'\n  },\n  number: {\n    base: 'must be a number',\n    unsafe: 'must be a safe number',\n    min: 'must be larger than or equal to {{limit}}',\n    max: 'must be less than or equal to {{limit}}',\n    less: 'must be less than {{limit}}',\n    greater: 'must be greater than {{limit}}',\n    integer: 'must be an integer',\n    negative: 'must be a negative number',\n    positive: 'must be a positive number',\n    precision: 'must have no more than {{limit}} decimal places',\n    ref: 'references \"{{ref}}\" which is not a number',\n    multiple: 'must be a multiple of {{multiple}}',\n    port: 'must be a valid port'\n  },\n  string: {\n    base: 'must be a string',\n    min: 'length must be at least {{limit}} characters long',\n    max: 'length must be less than or equal to {{limit}} characters long',\n    length: 'length must be {{limit}} characters long',\n    alphanum: 'must only contain alpha-numeric characters',\n    token: 'must only contain alpha-numeric and underscore characters',\n    regex: {\n      base: 'with value \"{{!value}}\" fails to match the required pattern: {{pattern}}',\n      name: 'with value \"{{!value}}\" fails to match the {{name}} pattern',\n      invert: {\n        base: 'with value \"{{!value}}\" matches the inverted pattern: {{pattern}}',\n        name: 'with value \"{{!value}}\" matches the inverted {{name}} pattern'\n      }\n    },\n    email: 'must be a valid email',\n    uri: 'must be a valid uri',\n    uriRelativeOnly: 'must be a valid relative uri',\n    uriCustomScheme: 'must be a valid uri with a scheme matching the {{scheme}} pattern',\n    isoDate: 'must be a valid ISO 8601 date',\n    guid: 'must be a valid GUID',\n    hex: 'must only contain hexadecimal characters',\n    hexAlign: 'hex decoded representation must be byte aligned',\n    base64: 'must be a valid base64 string',\n    dataUri: 'must be a valid dataUri string',\n    hostname: 'must be a valid hostname',\n    normalize: 'must be unicode normalized in the {{form}} form',\n    lowercase: 'must only contain lowercase characters',\n    uppercase: 'must only contain uppercase characters',\n    trim: 'must not have leading or trailing whitespace',\n    creditCard: 'must be a credit card',\n    ref: 'references \"{{ref}}\" which is not a number',\n    ip: 'must be a valid ip address with a {{cidr}} CIDR',\n    ipVersion: 'must be a valid ip address of one of the following versions {{version}} with a {{cidr}} CIDR'\n  },\n  symbol: {\n    base: 'must be a symbol',\n    map: 'must be one of {{map}}'\n  }\n};","map":{"version":3,"sources":["C:/Users/Asus A455L/portfolio-rizky/portfolio2/client/node_modules/@hapi/joi/lib/language.js"],"names":["internals","exports","errors","root","key","messages","wrapArrays","any","unknown","invalid","empty","required","allowOnly","default","alternatives","base","child","array","includes","includesSingle","includesOne","includesOneSingle","includesRequiredUnknowns","includesRequiredKnowns","includesRequiredBoth","excludes","excludesSingle","hasKnown","hasUnknown","min","max","length","ordered","orderedLength","ref","sparse","unique","boolean","binary","date","strict","less","greater","isoDate","timestamp","javascript","unix","function","arity","minArity","maxArity","class","lazy","schema","object","allowUnknown","with","without","missing","xor","oxor","and","nand","assert","rename","multiple","override","regex","type","number","unsafe","integer","negative","positive","precision","port","string","alphanum","token","name","invert","email","uri","uriRelativeOnly","uriCustomScheme","guid","hex","hexAlign","base64","dataUri","hostname","normalize","lowercase","uppercase","trim","creditCard","ip","ipVersion","symbol","map"],"mappings":"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","sourcesContent":["'use strict';\n\nconst internals = {};\n\n\nexports.errors = {\n    root: 'value',\n    key: '\"{{!label}}\" ',\n    messages: {\n        wrapArrays: true\n    },\n    any: {\n        unknown: 'is not allowed',\n        invalid: 'contains an invalid value',\n        empty: 'is not allowed to be empty',\n        required: 'is required',\n        allowOnly: 'must be one of {{valids}}',\n        default: 'threw an error when running default method'\n    },\n    alternatives: {\n        base: 'not matching any of the allowed alternatives',\n        child: null\n    },\n    array: {\n        base: 'must be an array',\n        includes: 'at position {{pos}} does not match any of the allowed types',\n        includesSingle: 'single value of \"{{!label}}\" does not match any of the allowed types',\n        includesOne: 'at position {{pos}} fails because {{reason}}',\n        includesOneSingle: 'single value of \"{{!label}}\" fails because {{reason}}',\n        includesRequiredUnknowns: 'does not contain {{unknownMisses}} required value(s)',\n        includesRequiredKnowns: 'does not contain {{knownMisses}}',\n        includesRequiredBoth: 'does not contain {{knownMisses}} and {{unknownMisses}} other required value(s)',\n        excludes: 'at position {{pos}} contains an excluded value',\n        excludesSingle: 'single value of \"{{!label}}\" contains an excluded value',\n        hasKnown: 'does not contain at least one required match for type \"{{!patternLabel}}\"',\n        hasUnknown: 'does not contain at least one required match',\n        min: 'must contain at least {{limit}} items',\n        max: 'must contain less than or equal to {{limit}} items',\n        length: 'must contain {{limit}} items',\n        ordered: 'at position {{pos}} fails because {{reason}}',\n        orderedLength: 'at position {{pos}} fails because array must contain at most {{limit}} items',\n        ref: 'references \"{{ref}}\" which is not a positive integer',\n        sparse: 'must not be a sparse array',\n        unique: 'position {{pos}} contains a duplicate value'\n    },\n    boolean: {\n        base: 'must be a boolean'\n    },\n    binary: {\n        base: 'must be a buffer or a string',\n        min: 'must be at least {{limit}} bytes',\n        max: 'must be less than or equal to {{limit}} bytes',\n        length: 'must be {{limit}} bytes'\n    },\n    date: {\n        base: 'must be a number of milliseconds or valid date string',\n        strict: 'must be a valid date',\n        min: 'must be larger than or equal to \"{{limit}}\"',\n        max: 'must be less than or equal to \"{{limit}}\"',\n        less: 'must be less than \"{{limit}}\"',\n        greater: 'must be greater than \"{{limit}}\"',\n        isoDate: 'must be a valid ISO 8601 date',\n        timestamp: {\n            javascript: 'must be a valid timestamp or number of milliseconds',\n            unix: 'must be a valid timestamp or number of seconds'\n        },\n        ref: 'references \"{{ref}}\" which is not a date'\n    },\n    function: {\n        base: 'must be a Function',\n        arity: 'must have an arity of {{n}}',\n        minArity: 'must have an arity greater or equal to {{n}}',\n        maxArity: 'must have an arity lesser or equal to {{n}}',\n        ref: 'must be a Joi reference',\n        class: 'must be a class'\n    },\n    lazy: {\n        base: '!!schema error: lazy schema must be set',\n        schema: '!!schema error: lazy schema function must return a schema'\n    },\n    object: {\n        base: 'must be an object',\n        child: '!!child \"{{!child}}\" fails because {{reason}}',\n        min: 'must have at least {{limit}} children',\n        max: 'must have less than or equal to {{limit}} children',\n        length: 'must have {{limit}} children',\n        allowUnknown: '!!\"{{!child}}\" is not allowed',\n        with: '!!\"{{mainWithLabel}}\" missing required peer \"{{peerWithLabel}}\"',\n        without: '!!\"{{mainWithLabel}}\" conflict with forbidden peer \"{{peerWithLabel}}\"',\n        missing: 'must contain at least one of {{peersWithLabels}}',\n        xor: 'contains a conflict between exclusive peers {{peersWithLabels}}',\n        oxor: 'contains a conflict between optional exclusive peers {{peersWithLabels}}',\n        and: 'contains {{presentWithLabels}} without its required peers {{missingWithLabels}}',\n        nand: '!!\"{{mainWithLabel}}\" must not exist simultaneously with {{peersWithLabels}}',\n        assert: '!!\"{{ref}}\" validation failed because \"{{ref}}\" failed to {{message}}',\n        rename: {\n            multiple: 'cannot rename child \"{{from}}\" because multiple renames are disabled and another key was already renamed to \"{{to}}\"',\n            override: 'cannot rename child \"{{from}}\" because override is disabled and target \"{{to}}\" exists',\n            regex: {\n                multiple: 'cannot rename children {{from}} because multiple renames are disabled and another key was already renamed to \"{{to}}\"',\n                override: 'cannot rename children {{from}} because override is disabled and target \"{{to}}\" exists'\n            }\n        },\n        type: 'must be an instance of \"{{type}}\"',\n        schema: 'must be a Joi instance'\n    },\n    number: {\n        base: 'must be a number',\n        unsafe: 'must be a safe number',\n        min: 'must be larger than or equal to {{limit}}',\n        max: 'must be less than or equal to {{limit}}',\n        less: 'must be less than {{limit}}',\n        greater: 'must be greater than {{limit}}',\n        integer: 'must be an integer',\n        negative: 'must be a negative number',\n        positive: 'must be a positive number',\n        precision: 'must have no more than {{limit}} decimal places',\n        ref: 'references \"{{ref}}\" which is not a number',\n        multiple: 'must be a multiple of {{multiple}}',\n        port: 'must be a valid port'\n    },\n    string: {\n        base: 'must be a string',\n        min: 'length must be at least {{limit}} characters long',\n        max: 'length must be less than or equal to {{limit}} characters long',\n        length: 'length must be {{limit}} characters long',\n        alphanum: 'must only contain alpha-numeric characters',\n        token: 'must only contain alpha-numeric and underscore characters',\n        regex: {\n            base: 'with value \"{{!value}}\" fails to match the required pattern: {{pattern}}',\n            name: 'with value \"{{!value}}\" fails to match the {{name}} pattern',\n            invert: {\n                base: 'with value \"{{!value}}\" matches the inverted pattern: {{pattern}}',\n                name: 'with value \"{{!value}}\" matches the inverted {{name}} pattern'\n            }\n        },\n        email: 'must be a valid email',\n        uri: 'must be a valid uri',\n        uriRelativeOnly: 'must be a valid relative uri',\n        uriCustomScheme: 'must be a valid uri with a scheme matching the {{scheme}} pattern',\n        isoDate: 'must be a valid ISO 8601 date',\n        guid: 'must be a valid GUID',\n        hex: 'must only contain hexadecimal characters',\n        hexAlign: 'hex decoded representation must be byte aligned',\n        base64: 'must be a valid base64 string',\n        dataUri: 'must be a valid dataUri string',\n        hostname: 'must be a valid hostname',\n        normalize: 'must be unicode normalized in the {{form}} form',\n        lowercase: 'must only contain lowercase characters',\n        uppercase: 'must only contain uppercase characters',\n        trim: 'must not have leading or trailing whitespace',\n        creditCard: 'must be a credit card',\n        ref: 'references \"{{ref}}\" which is not a number',\n        ip: 'must be a valid ip address with a {{cidr}} CIDR',\n        ipVersion: 'must be a valid ip address of one of the following versions {{version}} with a {{cidr}} CIDR'\n    },\n    symbol: {\n        base: 'must be a symbol',\n        map: 'must be one of {{map}}'\n    }\n};\n"]},"metadata":{},"sourceType":"script"}