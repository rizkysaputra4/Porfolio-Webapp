{"ast":null,"code":"'use strict';\n\nconst RFC3986 = require('./rfc3986');\n\nconst internals = {\n  Uri: {\n    createUriRegex: function (optionalScheme, allowRelative, relativeOnly, allowQuerySquareBrackets) {\n      let scheme = RFC3986.scheme;\n      let prefix;\n\n      if (relativeOnly) {\n        prefix = '(?:' + RFC3986.relativeRef + ')';\n      } else {\n        // If we were passed a scheme, use it instead of the generic one\n        if (optionalScheme) {\n          // Have to put this in a non-capturing group to handle the OR statements\n          scheme = '(?:' + optionalScheme + ')';\n        }\n\n        const withScheme = '(?:' + scheme + ':' + RFC3986.hierPart + ')';\n        prefix = allowRelative ? '(?:' + withScheme + '|' + RFC3986.relativeRef + ')' : withScheme;\n      }\n      /**\n       * URI = scheme \":\" hier-part [ \"?\" query ] [ \"#\" fragment ]\n       *\n       * OR\n       *\n       * relative-ref = relative-part [ \"?\" query ] [ \"#\" fragment ]\n       */\n\n\n      return new RegExp('^' + prefix + '(?:\\\\?' + (allowQuerySquareBrackets ? RFC3986.queryWithSquareBrackets : RFC3986.query) + ')?' + '(?:#' + RFC3986.fragment + ')?$');\n    }\n  }\n};\nmodule.exports = internals.Uri;","map":{"version":3,"sources":["C:/Users/Asus A455L/portfolio-rizky/portfolio2/client/node_modules/@hapi/joi/lib/types/string/uri.js"],"names":["RFC3986","require","internals","Uri","createUriRegex","optionalScheme","allowRelative","relativeOnly","allowQuerySquareBrackets","scheme","prefix","relativeRef","withScheme","hierPart","RegExp","queryWithSquareBrackets","query","fragment","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AAGA,MAAMC,SAAS,GAAG;AACdC,EAAAA,GAAG,EAAE;AACDC,IAAAA,cAAc,EAAE,UAAUC,cAAV,EAA0BC,aAA1B,EAAyCC,YAAzC,EAAuDC,wBAAvD,EAAiF;AAE7F,UAAIC,MAAM,GAAGT,OAAO,CAACS,MAArB;AACA,UAAIC,MAAJ;;AAEA,UAAIH,YAAJ,EAAkB;AACdG,QAAAA,MAAM,GAAG,QAAQV,OAAO,CAACW,WAAhB,GAA8B,GAAvC;AACH,OAFD,MAGK;AACD;AACA,YAAIN,cAAJ,EAAoB;AAEhB;AACAI,UAAAA,MAAM,GAAG,QAAQJ,cAAR,GAAyB,GAAlC;AACH;;AAED,cAAMO,UAAU,GAAG,QAAQH,MAAR,GAAiB,GAAjB,GAAuBT,OAAO,CAACa,QAA/B,GAA0C,GAA7D;AAEAH,QAAAA,MAAM,GAAGJ,aAAa,GAAG,QAAQM,UAAR,GAAqB,GAArB,GAA2BZ,OAAO,CAACW,WAAnC,GAAiD,GAApD,GAA0DC,UAAhF;AACH;AAED;AACZ;AACA;AACA;AACA;AACA;AACA;;;AACY,aAAO,IAAIE,MAAJ,CAAW,MAAMJ,MAAN,GAAe,QAAf,IAA2BF,wBAAwB,GAAGR,OAAO,CAACe,uBAAX,GAAqCf,OAAO,CAACgB,KAAhG,IAAyG,IAAzG,GAAgH,MAAhH,GAAyHhB,OAAO,CAACiB,QAAjI,GAA4I,KAAvJ,CAAP;AACH;AA9BA;AADS,CAAlB;AAmCAC,MAAM,CAACC,OAAP,GAAiBjB,SAAS,CAACC,GAA3B","sourcesContent":["'use strict';\n\nconst RFC3986 = require('./rfc3986');\n\n\nconst internals = {\n    Uri: {\n        createUriRegex: function (optionalScheme, allowRelative, relativeOnly, allowQuerySquareBrackets) {\n\n            let scheme = RFC3986.scheme;\n            let prefix;\n\n            if (relativeOnly) {\n                prefix = '(?:' + RFC3986.relativeRef + ')';\n            }\n            else {\n                // If we were passed a scheme, use it instead of the generic one\n                if (optionalScheme) {\n\n                    // Have to put this in a non-capturing group to handle the OR statements\n                    scheme = '(?:' + optionalScheme + ')';\n                }\n\n                const withScheme = '(?:' + scheme + ':' + RFC3986.hierPart + ')';\n\n                prefix = allowRelative ? '(?:' + withScheme + '|' + RFC3986.relativeRef + ')' : withScheme;\n            }\n\n            /**\n             * URI = scheme \":\" hier-part [ \"?\" query ] [ \"#\" fragment ]\n             *\n             * OR\n             *\n             * relative-ref = relative-part [ \"?\" query ] [ \"#\" fragment ]\n             */\n            return new RegExp('^' + prefix + '(?:\\\\?' + (allowQuerySquareBrackets ? RFC3986.queryWithSquareBrackets : RFC3986.query) + ')?' + '(?:#' + RFC3986.fragment + ')?$');\n        }\n    }\n};\n\nmodule.exports = internals.Uri;\n"]},"metadata":{},"sourceType":"script"}