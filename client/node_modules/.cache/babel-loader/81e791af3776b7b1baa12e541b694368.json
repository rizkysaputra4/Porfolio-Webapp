{"ast":null,"code":"'use strict';\n\nconst Assert = require('./assert');\n\nconst Clone = require('./clone');\n\nconst Merge = require('./merge');\n\nconst Utils = require('./utils');\n\nconst internals = {};\n\nmodule.exports = function (defaults, source, options = {}) {\n  Assert(defaults && typeof defaults === 'object', 'Invalid defaults value: must be an object');\n  Assert(!source || source === true || typeof source === 'object', 'Invalid source value: must be true, falsy or an object');\n  Assert(typeof options === 'object', 'Invalid options: must be an object');\n\n  if (!source) {\n    // If no source, return null\n    return null;\n  }\n\n  if (options.shallow) {\n    return internals.applyToDefaultsWithShallow(defaults, source, options);\n  }\n\n  const copy = Clone(defaults);\n\n  if (source === true) {\n    // If source is set to true, use defaults\n    return copy;\n  }\n\n  const nullOverride = options.nullOverride !== undefined ? options.nullOverride : false;\n  return Merge(copy, source, {\n    nullOverride,\n    mergeArrays: false\n  });\n};\n\ninternals.applyToDefaultsWithShallow = function (defaults, source, options) {\n  const keys = options.shallow;\n  Assert(Array.isArray(keys), 'Invalid keys');\n  options = Object.assign({}, options);\n  options.shallow = false;\n  const copy = Clone(defaults, {\n    shallow: keys\n  });\n\n  if (source === true) {\n    // If source is set to true, use defaults\n    return copy;\n  }\n\n  const storage = Utils.store(source, keys); // Move shallow copy items to storage\n\n  Merge(copy, source, {\n    mergeArrays: false,\n    nullOverride: false\n  }); // Deep copy the rest\n\n  Utils.restore(copy, source, storage); // Shallow copy the stored items and restore\n\n  return copy;\n};","map":{"version":3,"sources":["C:/Users/Asus A455L/portfolio-rizky/portfolio2/client/node_modules/@hapi/hoek/lib/applyToDefaults.js"],"names":["Assert","require","Clone","Merge","Utils","internals","module","exports","defaults","source","options","shallow","applyToDefaultsWithShallow","copy","nullOverride","undefined","mergeArrays","keys","Array","isArray","Object","assign","storage","store","restore"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAArB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,SAAD,CAArB;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,SAAD,CAArB;;AAGA,MAAMI,SAAS,GAAG,EAAlB;;AAGAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,QAAV,EAAoBC,MAApB,EAA4BC,OAAO,GAAG,EAAtC,EAA0C;AAEvDV,EAAAA,MAAM,CAACQ,QAAQ,IAAI,OAAOA,QAAP,KAAoB,QAAjC,EAA2C,2CAA3C,CAAN;AACAR,EAAAA,MAAM,CAAC,CAACS,MAAD,IAAWA,MAAM,KAAK,IAAtB,IAA8B,OAAOA,MAAP,KAAkB,QAAjD,EAA2D,wDAA3D,CAAN;AACAT,EAAAA,MAAM,CAAC,OAAOU,OAAP,KAAmB,QAApB,EAA8B,oCAA9B,CAAN;;AAEA,MAAI,CAACD,MAAL,EAAa;AAAmD;AAC5D,WAAO,IAAP;AACH;;AAED,MAAIC,OAAO,CAACC,OAAZ,EAAqB;AACjB,WAAON,SAAS,CAACO,0BAAV,CAAqCJ,QAArC,EAA+CC,MAA/C,EAAuDC,OAAvD,CAAP;AACH;;AAED,QAAMG,IAAI,GAAGX,KAAK,CAACM,QAAD,CAAlB;;AAEA,MAAIC,MAAM,KAAK,IAAf,EAAqB;AAA2C;AAC5D,WAAOI,IAAP;AACH;;AAED,QAAMC,YAAY,GAAGJ,OAAO,CAACI,YAAR,KAAyBC,SAAzB,GAAqCL,OAAO,CAACI,YAA7C,GAA4D,KAAjF;AACA,SAAOX,KAAK,CAACU,IAAD,EAAOJ,MAAP,EAAe;AAAEK,IAAAA,YAAF;AAAgBE,IAAAA,WAAW,EAAE;AAA7B,GAAf,CAAZ;AACH,CAtBD;;AAyBAX,SAAS,CAACO,0BAAV,GAAuC,UAAUJ,QAAV,EAAoBC,MAApB,EAA4BC,OAA5B,EAAqC;AAExE,QAAMO,IAAI,GAAGP,OAAO,CAACC,OAArB;AACAX,EAAAA,MAAM,CAACkB,KAAK,CAACC,OAAN,CAAcF,IAAd,CAAD,EAAsB,cAAtB,CAAN;AAEAP,EAAAA,OAAO,GAAGU,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBX,OAAlB,CAAV;AACAA,EAAAA,OAAO,CAACC,OAAR,GAAkB,KAAlB;AAEA,QAAME,IAAI,GAAGX,KAAK,CAACM,QAAD,EAAW;AAAEG,IAAAA,OAAO,EAAEM;AAAX,GAAX,CAAlB;;AAEA,MAAIR,MAAM,KAAK,IAAf,EAAqB;AAAuD;AACxE,WAAOI,IAAP;AACH;;AAED,QAAMS,OAAO,GAAGlB,KAAK,CAACmB,KAAN,CAAYd,MAAZ,EAAoBQ,IAApB,CAAhB,CAdwE,CAcA;;AACxEd,EAAAA,KAAK,CAACU,IAAD,EAAOJ,MAAP,EAAe;AAAEO,IAAAA,WAAW,EAAE,KAAf;AAAsBF,IAAAA,YAAY,EAAE;AAApC,GAAf,CAAL,CAfwE,CAeJ;;AACpEV,EAAAA,KAAK,CAACoB,OAAN,CAAcX,IAAd,EAAoBJ,MAApB,EAA4Ba,OAA5B,EAhBwE,CAgBA;;AACxE,SAAOT,IAAP;AACH,CAlBD","sourcesContent":["'use strict';\n\nconst Assert = require('./assert');\nconst Clone = require('./clone');\nconst Merge = require('./merge');\nconst Utils = require('./utils');\n\n\nconst internals = {};\n\n\nmodule.exports = function (defaults, source, options = {}) {\n\n    Assert(defaults && typeof defaults === 'object', 'Invalid defaults value: must be an object');\n    Assert(!source || source === true || typeof source === 'object', 'Invalid source value: must be true, falsy or an object');\n    Assert(typeof options === 'object', 'Invalid options: must be an object');\n\n    if (!source) {                                                  // If no source, return null\n        return null;\n    }\n\n    if (options.shallow) {\n        return internals.applyToDefaultsWithShallow(defaults, source, options);\n    }\n\n    const copy = Clone(defaults);\n\n    if (source === true) {                                          // If source is set to true, use defaults\n        return copy;\n    }\n\n    const nullOverride = options.nullOverride !== undefined ? options.nullOverride : false;\n    return Merge(copy, source, { nullOverride, mergeArrays: false });\n};\n\n\ninternals.applyToDefaultsWithShallow = function (defaults, source, options) {\n\n    const keys = options.shallow;\n    Assert(Array.isArray(keys), 'Invalid keys');\n\n    options = Object.assign({}, options);\n    options.shallow = false;\n\n    const copy = Clone(defaults, { shallow: keys });\n\n    if (source === true) {                                                      // If source is set to true, use defaults\n        return copy;\n    }\n\n    const storage = Utils.store(source, keys);                              // Move shallow copy items to storage\n    Merge(copy, source, { mergeArrays: false, nullOverride: false });   // Deep copy the rest\n    Utils.restore(copy, source, storage);                                   // Shallow copy the stored items and restore\n    return copy;\n};\n"]},"metadata":{},"sourceType":"script"}