{"ast":null,"code":"/*!\r\n * MotionPathPlugin 3.5.1\r\n * https://greensock.com\r\n *\r\n * @license Copyright 2008-2020, GreenSock. All rights reserved.\r\n * Subject to the terms at https://greensock.com/standard-license or for\r\n * Club GreenSock members, the agreement issued with that membership.\r\n * @author: Jack Doyle, jack@greensock.com\r\n*/\n\n/* eslint-disable */\nimport { getRawPath, cacheRawPathMeasurements, getPositionOnPath, pointsToSegment, flatPointsToSegment, sliceRawPath, stringToRawPath, rawPathToString, transformRawPath, convertToPath as _convertToPath } from \"./utils/paths.js\";\nimport { getGlobalMatrix } from \"./utils/matrix.js\";\n\nvar _xProps = [\"x\", \"translateX\", \"left\", \"marginLeft\"],\n    _yProps = [\"y\", \"translateY\", \"top\", \"marginTop\"],\n    _DEG2RAD = Math.PI / 180,\n    gsap,\n    PropTween,\n    _getUnit,\n    _toArray,\n    _getGSAP = function _getGSAP() {\n  return gsap || typeof window !== \"undefined\" && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n},\n    _populateSegmentFromArray = function _populateSegmentFromArray(segment, values, property, mode) {\n  //mode: 0 = x but don't fill y yet, 1 = y, 2 = x and fill y with 0.\n  var l = values.length,\n      si = mode === 2 ? 0 : mode,\n      i = 0;\n\n  for (; i < l; i++) {\n    segment[si] = parseFloat(values[i][property]);\n    mode === 2 && (segment[si + 1] = 0);\n    si += 2;\n  }\n\n  return segment;\n},\n    _getPropNum = function _getPropNum(target, prop, unit) {\n  return parseFloat(target._gsap.get(target, prop, unit || \"px\")) || 0;\n},\n    _relativize = function _relativize(segment) {\n  var x = segment[0],\n      y = segment[1],\n      i;\n\n  for (i = 2; i < segment.length; i += 2) {\n    x = segment[i] += x;\n    y = segment[i + 1] += y;\n  }\n},\n    _segmentToRawPath = function _segmentToRawPath(plugin, segment, target, x, y, slicer, vars) {\n  if (vars.type === \"cubic\") {\n    segment = [segment];\n  } else {\n    segment.unshift(_getPropNum(target, x, vars.unitX), y ? _getPropNum(target, y, vars.unitY) : 0);\n    vars.relative && _relativize(segment);\n    var pointFunc = y ? pointsToSegment : flatPointsToSegment;\n    segment = [pointFunc(segment, vars.curviness)];\n  }\n\n  segment = slicer(_align(segment, target, vars));\n\n  _addDimensionalPropTween(plugin, target, x, segment, \"x\", vars.unitX);\n\n  y && _addDimensionalPropTween(plugin, target, y, segment, \"y\", vars.unitY);\n  return cacheRawPathMeasurements(segment, vars.resolution || (vars.curviness === 0 ? 20 : 12)); //when curviness is 0, it creates control points right on top of the anchors which makes it more sensitive to resolution, thus we change the default accordingly.\n},\n    _emptyFunc = function _emptyFunc(v) {\n  return v;\n},\n    _numExp = /[-+\\.]*\\d+[\\.e\\-\\+]*\\d*[e\\-\\+]*\\d*/g,\n    _originToPoint = function _originToPoint(element, origin, parentMatrix) {\n  // origin is an array of normalized values (0-1) in relation to the width/height, so [0.5, 0.5] would be the center. It can also be \"auto\" in which case it will be the top left unless it's a <path>, when it will start at the beginning of the path itself.\n  var m = getGlobalMatrix(element),\n      svg,\n      x,\n      y;\n\n  if ((element.tagName + \"\").toLowerCase() === \"svg\") {\n    svg = element.viewBox.baseVal;\n    x = svg.x;\n    y = svg.y;\n    svg.width || (svg = {\n      width: +element.getAttribute(\"width\"),\n      height: +element.getAttribute(\"height\")\n    });\n  } else {\n    svg = origin && element.getBBox && element.getBBox();\n    x = y = 0;\n  }\n\n  if (origin && origin !== \"auto\") {\n    x += origin.push ? origin[0] * (svg ? svg.width : element.offsetWidth || 0) : origin.x;\n    y += origin.push ? origin[1] * (svg ? svg.height : element.offsetHeight || 0) : origin.y;\n  }\n\n  return parentMatrix.apply(x || y ? m.apply({\n    x: x,\n    y: y\n  }) : {\n    x: m.e,\n    y: m.f\n  });\n},\n    _getAlignMatrix = function _getAlignMatrix(fromElement, toElement, fromOrigin, toOrigin) {\n  var parentMatrix = getGlobalMatrix(fromElement.parentNode, true, true),\n      m = parentMatrix.clone().multiply(getGlobalMatrix(toElement)),\n      fromPoint = _originToPoint(fromElement, fromOrigin, parentMatrix),\n      _originToPoint2 = _originToPoint(toElement, toOrigin, parentMatrix),\n      x = _originToPoint2.x,\n      y = _originToPoint2.y,\n      p;\n\n  m.e = m.f = 0;\n\n  if (toOrigin === \"auto\" && toElement.getTotalLength && toElement.tagName.toLowerCase() === \"path\") {\n    p = toElement.getAttribute(\"d\").match(_numExp) || [];\n    p = m.apply({\n      x: +p[0],\n      y: +p[1]\n    });\n    x += p.x;\n    y += p.y;\n  }\n\n  if (p || toElement.getBBox && fromElement.getBBox && toElement.ownerSVGElement === fromElement.ownerSVGElement) {\n    p = m.apply(toElement.getBBox());\n    x -= p.x;\n    y -= p.y;\n  }\n\n  m.e = x - fromPoint.x;\n  m.f = y - fromPoint.y;\n  return m;\n},\n    _align = function _align(rawPath, target, _ref) {\n  var align = _ref.align,\n      matrix = _ref.matrix,\n      offsetX = _ref.offsetX,\n      offsetY = _ref.offsetY,\n      alignOrigin = _ref.alignOrigin;\n\n  var x = rawPath[0][0],\n      y = rawPath[0][1],\n      curX = _getPropNum(target, \"x\"),\n      curY = _getPropNum(target, \"y\"),\n      alignTarget,\n      m,\n      p;\n\n  if (!rawPath || !rawPath.length) {\n    return getRawPath(\"M0,0L0,0\");\n  }\n\n  if (align) {\n    if (align === \"self\" || (alignTarget = _toArray(align)[0] || target) === target) {\n      transformRawPath(rawPath, 1, 0, 0, 1, curX - x, curY - y);\n    } else {\n      if (alignOrigin && alignOrigin[2] !== false) {\n        gsap.set(target, {\n          transformOrigin: alignOrigin[0] * 100 + \"% \" + alignOrigin[1] * 100 + \"%\"\n        });\n      } else {\n        alignOrigin = [_getPropNum(target, \"xPercent\") / -100, _getPropNum(target, \"yPercent\") / -100];\n      }\n\n      m = _getAlignMatrix(target, alignTarget, alignOrigin, \"auto\");\n      p = m.apply({\n        x: x,\n        y: y\n      });\n      transformRawPath(rawPath, m.a, m.b, m.c, m.d, curX + m.e - (p.x - m.e), curY + m.f - (p.y - m.f));\n    }\n  }\n\n  if (matrix) {\n    transformRawPath(rawPath, matrix.a, matrix.b, matrix.c, matrix.d, matrix.e, matrix.f);\n  } else if (offsetX || offsetY) {\n    transformRawPath(rawPath, 1, 0, 0, 1, offsetX || 0, offsetY || 0);\n  }\n\n  return rawPath;\n},\n    _addDimensionalPropTween = function _addDimensionalPropTween(plugin, target, property, rawPath, pathProperty, forceUnit) {\n  var cache = target._gsap,\n      harness = cache.harness,\n      alias = harness && harness.aliases && harness.aliases[property],\n      prop = alias && alias.indexOf(\",\") < 0 ? alias : property,\n      pt = plugin._pt = new PropTween(plugin._pt, target, prop, 0, 0, _emptyFunc, 0, cache.set(target, prop, plugin));\n  pt.u = _getUnit(cache.get(target, prop, forceUnit)) || 0;\n  pt.path = rawPath;\n  pt.pp = pathProperty;\n\n  plugin._props.push(prop);\n},\n    _sliceModifier = function _sliceModifier(start, end) {\n  return function (rawPath) {\n    return start || end !== 1 ? sliceRawPath(rawPath, start, end) : rawPath;\n  };\n};\n\nexport var MotionPathPlugin = {\n  version: \"3.5.1\",\n  name: \"motionPath\",\n  register: function register(core, Plugin, propTween) {\n    gsap = core;\n    _getUnit = gsap.utils.getUnit;\n    _toArray = gsap.utils.toArray;\n    PropTween = propTween;\n  },\n  init: function init(target, vars) {\n    if (!gsap) {\n      console.warn(\"Please gsap.registerPlugin(MotionPathPlugin)\");\n      return false;\n    }\n\n    if (!(typeof vars === \"object\" && !vars.style) || !vars.path) {\n      vars = {\n        path: vars\n      };\n    }\n\n    var rawPaths = [],\n        path = vars.path,\n        firstObj = path[0],\n        autoRotate = vars.autoRotate,\n        slicer = _sliceModifier(vars.start, \"end\" in vars ? vars.end : 1),\n        rawPath,\n        p,\n        x,\n        y;\n\n    this.rawPaths = rawPaths;\n    this.target = target;\n\n    if (this.rotate = autoRotate || autoRotate === 0) {\n      //get the rotational data FIRST so that the setTransform() method is called in the correct order in the render() loop - rotation gets set last.\n      this.rOffset = parseFloat(autoRotate) || 0;\n      this.radians = !!vars.useRadians;\n      this.rProp = vars.rotation || \"rotation\"; // rotation property\n\n      this.rSet = target._gsap.set(target, this.rProp, this); // rotation setter\n\n      this.ru = _getUnit(target._gsap.get(target, this.rProp)) || 0; // rotation units\n    }\n\n    if (Array.isArray(path) && !(\"closed\" in path) && typeof firstObj !== \"number\") {\n      for (p in firstObj) {\n        if (~_xProps.indexOf(p)) {\n          x = p;\n        } else if (~_yProps.indexOf(p)) {\n          y = p;\n        }\n      }\n\n      if (x && y) {\n        //correlated values\n        rawPaths.push(_segmentToRawPath(this, _populateSegmentFromArray(_populateSegmentFromArray([], path, x, 0), path, y, 1), target, vars.x || x, vars.y || y, slicer, vars));\n      } else {\n        x = y = 0;\n      }\n\n      for (p in firstObj) {\n        p !== x && p !== y && rawPaths.push(_segmentToRawPath(this, _populateSegmentFromArray([], path, p, 2), target, p, 0, slicer, vars));\n      }\n    } else {\n      rawPath = slicer(_align(getRawPath(vars.path), target, vars));\n      cacheRawPathMeasurements(rawPath, vars.resolution);\n      rawPaths.push(rawPath);\n\n      _addDimensionalPropTween(this, target, vars.x || \"x\", rawPath, \"x\", vars.unitX || \"px\");\n\n      _addDimensionalPropTween(this, target, vars.y || \"y\", rawPath, \"y\", vars.unitY || \"px\");\n    }\n  },\n  render: function render(ratio, data) {\n    var rawPaths = data.rawPaths,\n        i = rawPaths.length,\n        pt = data._pt;\n\n    if (ratio > 1) {\n      ratio = 1;\n    } else if (ratio < 0) {\n      ratio = 0;\n    }\n\n    while (i--) {\n      getPositionOnPath(rawPaths[i], ratio, !i && data.rotate, rawPaths[i]);\n    }\n\n    while (pt) {\n      pt.set(pt.t, pt.p, pt.path[pt.pp] + pt.u, pt.d, ratio);\n      pt = pt._next;\n    }\n\n    data.rotate && data.rSet(data.target, data.rProp, rawPaths[0].angle * (data.radians ? _DEG2RAD : 1) + data.rOffset + data.ru, data, ratio);\n  },\n  getLength: function getLength(path) {\n    return cacheRawPathMeasurements(getRawPath(path)).totalLength;\n  },\n  sliceRawPath: sliceRawPath,\n  getRawPath: getRawPath,\n  pointsToSegment: pointsToSegment,\n  stringToRawPath: stringToRawPath,\n  rawPathToString: rawPathToString,\n  transformRawPath: transformRawPath,\n  getGlobalMatrix: getGlobalMatrix,\n  getPositionOnPath: getPositionOnPath,\n  cacheRawPathMeasurements: cacheRawPathMeasurements,\n  convertToPath: function convertToPath(targets, swap) {\n    return _toArray(targets).map(function (target) {\n      return _convertToPath(target, swap !== false);\n    });\n  },\n  convertCoordinates: function convertCoordinates(fromElement, toElement, point) {\n    var m = getGlobalMatrix(toElement, true, true).multiply(getGlobalMatrix(fromElement));\n    return point ? m.apply(point) : m;\n  },\n  getAlignMatrix: _getAlignMatrix,\n  getRelativePosition: function getRelativePosition(fromElement, toElement, fromOrigin, toOrigin) {\n    var m = _getAlignMatrix(fromElement, toElement, fromOrigin, toOrigin);\n\n    return {\n      x: m.e,\n      y: m.f\n    };\n  },\n  arrayToRawPath: function arrayToRawPath(value, vars) {\n    vars = vars || {};\n\n    var segment = _populateSegmentFromArray(_populateSegmentFromArray([], value, vars.x || \"x\", 0), value, vars.y || \"y\", 1);\n\n    vars.relative && _relativize(segment);\n    return [vars.type === \"cubic\" ? segment : pointsToSegment(segment, vars.curviness)];\n  }\n};\n_getGSAP() && gsap.registerPlugin(MotionPathPlugin);\nexport { MotionPathPlugin as default };","map":{"version":3,"sources":["E:/portfolio2/client/node_modules/gsap/MotionPathPlugin.js"],"names":["getRawPath","cacheRawPathMeasurements","getPositionOnPath","pointsToSegment","flatPointsToSegment","sliceRawPath","stringToRawPath","rawPathToString","transformRawPath","convertToPath","_convertToPath","getGlobalMatrix","_xProps","_yProps","_DEG2RAD","Math","PI","gsap","PropTween","_getUnit","_toArray","_getGSAP","window","registerPlugin","_populateSegmentFromArray","segment","values","property","mode","l","length","si","i","parseFloat","_getPropNum","target","prop","unit","_gsap","get","_relativize","x","y","_segmentToRawPath","plugin","slicer","vars","type","unshift","unitX","unitY","relative","pointFunc","curviness","_align","_addDimensionalPropTween","resolution","_emptyFunc","v","_numExp","_originToPoint","element","origin","parentMatrix","m","svg","tagName","toLowerCase","viewBox","baseVal","width","getAttribute","height","getBBox","push","offsetWidth","offsetHeight","apply","e","f","_getAlignMatrix","fromElement","toElement","fromOrigin","toOrigin","parentNode","clone","multiply","fromPoint","_originToPoint2","p","getTotalLength","match","ownerSVGElement","rawPath","_ref","align","matrix","offsetX","offsetY","alignOrigin","curX","curY","alignTarget","set","transformOrigin","a","b","c","d","pathProperty","forceUnit","cache","harness","alias","aliases","indexOf","pt","_pt","u","path","pp","_props","_sliceModifier","start","end","MotionPathPlugin","version","name","register","core","Plugin","propTween","utils","getUnit","toArray","init","console","warn","style","rawPaths","firstObj","autoRotate","rotate","rOffset","radians","useRadians","rProp","rotation","rSet","ru","Array","isArray","render","ratio","data","t","_next","angle","getLength","totalLength","targets","swap","map","convertCoordinates","point","getAlignMatrix","getRelativePosition","arrayToRawPath","value","default"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAASA,UAAT,EAAqBC,wBAArB,EAA+CC,iBAA/C,EAAkEC,eAAlE,EAAmFC,mBAAnF,EAAwGC,YAAxG,EAAsHC,eAAtH,EAAuIC,eAAvI,EAAwJC,gBAAxJ,EAA0KC,aAAa,IAAIC,cAA3L,QAAiN,kBAAjN;AACA,SAASC,eAAT,QAAgC,mBAAhC;;AAEA,IAAIC,OAAO,GAAG,CAAC,GAAD,EAAM,YAAN,EAAoB,MAApB,EAA4B,YAA5B,CAAd;AAAA,IACIC,OAAO,GAAG,CAAC,GAAD,EAAM,YAAN,EAAoB,KAApB,EAA2B,WAA3B,CADd;AAAA,IAEIC,QAAQ,GAAGC,IAAI,CAACC,EAAL,GAAU,GAFzB;AAAA,IAGIC,IAHJ;AAAA,IAIIC,SAJJ;AAAA,IAKIC,QALJ;AAAA,IAMIC,QANJ;AAAA,IAOIC,QAAQ,GAAG,SAASA,QAAT,GAAoB;AACjC,SAAOJ,IAAI,IAAI,OAAOK,MAAP,KAAkB,WAAlB,KAAkCL,IAAI,GAAGK,MAAM,CAACL,IAAhD,KAAyDA,IAAI,CAACM,cAA9D,IAAgFN,IAA/F;AACD,CATD;AAAA,IAUIO,yBAAyB,GAAG,SAASA,yBAAT,CAAmCC,OAAnC,EAA4CC,MAA5C,EAAoDC,QAApD,EAA8DC,IAA9D,EAAoE;AAClG;AACA,MAAIC,CAAC,GAAGH,MAAM,CAACI,MAAf;AAAA,MACIC,EAAE,GAAGH,IAAI,KAAK,CAAT,GAAa,CAAb,GAAiBA,IAD1B;AAAA,MAEII,CAAC,GAAG,CAFR;;AAIA,SAAOA,CAAC,GAAGH,CAAX,EAAcG,CAAC,EAAf,EAAmB;AACjBP,IAAAA,OAAO,CAACM,EAAD,CAAP,GAAcE,UAAU,CAACP,MAAM,CAACM,CAAD,CAAN,CAAUL,QAAV,CAAD,CAAxB;AACAC,IAAAA,IAAI,KAAK,CAAT,KAAeH,OAAO,CAACM,EAAE,GAAG,CAAN,CAAP,GAAkB,CAAjC;AACAA,IAAAA,EAAE,IAAI,CAAN;AACD;;AAED,SAAON,OAAP;AACD,CAvBD;AAAA,IAwBIS,WAAW,GAAG,SAASA,WAAT,CAAqBC,MAArB,EAA6BC,IAA7B,EAAmCC,IAAnC,EAAyC;AACzD,SAAOJ,UAAU,CAACE,MAAM,CAACG,KAAP,CAAaC,GAAb,CAAiBJ,MAAjB,EAAyBC,IAAzB,EAA+BC,IAAI,IAAI,IAAvC,CAAD,CAAV,IAA4D,CAAnE;AACD,CA1BD;AAAA,IA2BIG,WAAW,GAAG,SAASA,WAAT,CAAqBf,OAArB,EAA8B;AAC9C,MAAIgB,CAAC,GAAGhB,OAAO,CAAC,CAAD,CAAf;AAAA,MACIiB,CAAC,GAAGjB,OAAO,CAAC,CAAD,CADf;AAAA,MAEIO,CAFJ;;AAIA,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGP,OAAO,CAACK,MAAxB,EAAgCE,CAAC,IAAI,CAArC,EAAwC;AACtCS,IAAAA,CAAC,GAAGhB,OAAO,CAACO,CAAD,CAAP,IAAcS,CAAlB;AACAC,IAAAA,CAAC,GAAGjB,OAAO,CAACO,CAAC,GAAG,CAAL,CAAP,IAAkBU,CAAtB;AACD;AACF,CApCD;AAAA,IAqCIC,iBAAiB,GAAG,SAASA,iBAAT,CAA2BC,MAA3B,EAAmCnB,OAAnC,EAA4CU,MAA5C,EAAoDM,CAApD,EAAuDC,CAAvD,EAA0DG,MAA1D,EAAkEC,IAAlE,EAAwE;AAC9F,MAAIA,IAAI,CAACC,IAAL,KAAc,OAAlB,EAA2B;AACzBtB,IAAAA,OAAO,GAAG,CAACA,OAAD,CAAV;AACD,GAFD,MAEO;AACLA,IAAAA,OAAO,CAACuB,OAAR,CAAgBd,WAAW,CAACC,MAAD,EAASM,CAAT,EAAYK,IAAI,CAACG,KAAjB,CAA3B,EAAoDP,CAAC,GAAGR,WAAW,CAACC,MAAD,EAASO,CAAT,EAAYI,IAAI,CAACI,KAAjB,CAAd,GAAwC,CAA7F;AACAJ,IAAAA,IAAI,CAACK,QAAL,IAAiBX,WAAW,CAACf,OAAD,CAA5B;AACA,QAAI2B,SAAS,GAAGV,CAAC,GAAGvC,eAAH,GAAqBC,mBAAtC;AACAqB,IAAAA,OAAO,GAAG,CAAC2B,SAAS,CAAC3B,OAAD,EAAUqB,IAAI,CAACO,SAAf,CAAV,CAAV;AACD;;AAED5B,EAAAA,OAAO,GAAGoB,MAAM,CAACS,MAAM,CAAC7B,OAAD,EAAUU,MAAV,EAAkBW,IAAlB,CAAP,CAAhB;;AAEAS,EAAAA,wBAAwB,CAACX,MAAD,EAAST,MAAT,EAAiBM,CAAjB,EAAoBhB,OAApB,EAA6B,GAA7B,EAAkCqB,IAAI,CAACG,KAAvC,CAAxB;;AAEAP,EAAAA,CAAC,IAAIa,wBAAwB,CAACX,MAAD,EAAST,MAAT,EAAiBO,CAAjB,EAAoBjB,OAApB,EAA6B,GAA7B,EAAkCqB,IAAI,CAACI,KAAvC,CAA7B;AACA,SAAOjD,wBAAwB,CAACwB,OAAD,EAAUqB,IAAI,CAACU,UAAL,KAAoBV,IAAI,CAACO,SAAL,KAAmB,CAAnB,GAAuB,EAAvB,GAA4B,EAAhD,CAAV,CAA/B,CAf8F,CAeC;AAChG,CArDD;AAAA,IAsDII,UAAU,GAAG,SAASA,UAAT,CAAoBC,CAApB,EAAuB;AACtC,SAAOA,CAAP;AACD,CAxDD;AAAA,IAyDIC,OAAO,GAAG,qCAzDd;AAAA,IA0DIC,cAAc,GAAG,SAASA,cAAT,CAAwBC,OAAxB,EAAiCC,MAAjC,EAAyCC,YAAzC,EAAuD;AAC1E;AACA,MAAIC,CAAC,GAAGrD,eAAe,CAACkD,OAAD,CAAvB;AAAA,MACII,GADJ;AAAA,MAEIxB,CAFJ;AAAA,MAGIC,CAHJ;;AAKA,MAAI,CAACmB,OAAO,CAACK,OAAR,GAAkB,EAAnB,EAAuBC,WAAvB,OAAyC,KAA7C,EAAoD;AAClDF,IAAAA,GAAG,GAAGJ,OAAO,CAACO,OAAR,CAAgBC,OAAtB;AACA5B,IAAAA,CAAC,GAAGwB,GAAG,CAACxB,CAAR;AACAC,IAAAA,CAAC,GAAGuB,GAAG,CAACvB,CAAR;AACAuB,IAAAA,GAAG,CAACK,KAAJ,KAAcL,GAAG,GAAG;AAClBK,MAAAA,KAAK,EAAE,CAACT,OAAO,CAACU,YAAR,CAAqB,OAArB,CADU;AAElBC,MAAAA,MAAM,EAAE,CAACX,OAAO,CAACU,YAAR,CAAqB,QAArB;AAFS,KAApB;AAID,GARD,MAQO;AACLN,IAAAA,GAAG,GAAGH,MAAM,IAAID,OAAO,CAACY,OAAlB,IAA6BZ,OAAO,CAACY,OAAR,EAAnC;AACAhC,IAAAA,CAAC,GAAGC,CAAC,GAAG,CAAR;AACD;;AAED,MAAIoB,MAAM,IAAIA,MAAM,KAAK,MAAzB,EAAiC;AAC/BrB,IAAAA,CAAC,IAAIqB,MAAM,CAACY,IAAP,GAAcZ,MAAM,CAAC,CAAD,CAAN,IAAaG,GAAG,GAAGA,GAAG,CAACK,KAAP,GAAeT,OAAO,CAACc,WAAR,IAAuB,CAAtD,CAAd,GAAyEb,MAAM,CAACrB,CAArF;AACAC,IAAAA,CAAC,IAAIoB,MAAM,CAACY,IAAP,GAAcZ,MAAM,CAAC,CAAD,CAAN,IAAaG,GAAG,GAAGA,GAAG,CAACO,MAAP,GAAgBX,OAAO,CAACe,YAAR,IAAwB,CAAxD,CAAd,GAA2Ed,MAAM,CAACpB,CAAvF;AACD;;AAED,SAAOqB,YAAY,CAACc,KAAb,CAAmBpC,CAAC,IAAIC,CAAL,GAASsB,CAAC,CAACa,KAAF,CAAQ;AACzCpC,IAAAA,CAAC,EAAEA,CADsC;AAEzCC,IAAAA,CAAC,EAAEA;AAFsC,GAAR,CAAT,GAGrB;AACHD,IAAAA,CAAC,EAAEuB,CAAC,CAACc,CADF;AAEHpC,IAAAA,CAAC,EAAEsB,CAAC,CAACe;AAFF,GAHE,CAAP;AAOD,CA1FD;AAAA,IA2FIC,eAAe,GAAG,SAASA,eAAT,CAAyBC,WAAzB,EAAsCC,SAAtC,EAAiDC,UAAjD,EAA6DC,QAA7D,EAAuE;AAC3F,MAAIrB,YAAY,GAAGpD,eAAe,CAACsE,WAAW,CAACI,UAAb,EAAyB,IAAzB,EAA+B,IAA/B,CAAlC;AAAA,MACIrB,CAAC,GAAGD,YAAY,CAACuB,KAAb,GAAqBC,QAArB,CAA8B5E,eAAe,CAACuE,SAAD,CAA7C,CADR;AAAA,MAEIM,SAAS,GAAG5B,cAAc,CAACqB,WAAD,EAAcE,UAAd,EAA0BpB,YAA1B,CAF9B;AAAA,MAGI0B,eAAe,GAAG7B,cAAc,CAACsB,SAAD,EAAYE,QAAZ,EAAsBrB,YAAtB,CAHpC;AAAA,MAIItB,CAAC,GAAGgD,eAAe,CAAChD,CAJxB;AAAA,MAKIC,CAAC,GAAG+C,eAAe,CAAC/C,CALxB;AAAA,MAMIgD,CANJ;;AAQA1B,EAAAA,CAAC,CAACc,CAAF,GAAMd,CAAC,CAACe,CAAF,GAAM,CAAZ;;AAEA,MAAIK,QAAQ,KAAK,MAAb,IAAuBF,SAAS,CAACS,cAAjC,IAAmDT,SAAS,CAAChB,OAAV,CAAkBC,WAAlB,OAAoC,MAA3F,EAAmG;AACjGuB,IAAAA,CAAC,GAAGR,SAAS,CAACX,YAAV,CAAuB,GAAvB,EAA4BqB,KAA5B,CAAkCjC,OAAlC,KAA8C,EAAlD;AACA+B,IAAAA,CAAC,GAAG1B,CAAC,CAACa,KAAF,CAAQ;AACVpC,MAAAA,CAAC,EAAE,CAACiD,CAAC,CAAC,CAAD,CADK;AAEVhD,MAAAA,CAAC,EAAE,CAACgD,CAAC,CAAC,CAAD;AAFK,KAAR,CAAJ;AAIAjD,IAAAA,CAAC,IAAIiD,CAAC,CAACjD,CAAP;AACAC,IAAAA,CAAC,IAAIgD,CAAC,CAAChD,CAAP;AACD;;AAED,MAAIgD,CAAC,IAAIR,SAAS,CAACT,OAAV,IAAqBQ,WAAW,CAACR,OAAjC,IAA4CS,SAAS,CAACW,eAAV,KAA8BZ,WAAW,CAACY,eAA/F,EAAgH;AAC9GH,IAAAA,CAAC,GAAG1B,CAAC,CAACa,KAAF,CAAQK,SAAS,CAACT,OAAV,EAAR,CAAJ;AACAhC,IAAAA,CAAC,IAAIiD,CAAC,CAACjD,CAAP;AACAC,IAAAA,CAAC,IAAIgD,CAAC,CAAChD,CAAP;AACD;;AAEDsB,EAAAA,CAAC,CAACc,CAAF,GAAMrC,CAAC,GAAG+C,SAAS,CAAC/C,CAApB;AACAuB,EAAAA,CAAC,CAACe,CAAF,GAAMrC,CAAC,GAAG8C,SAAS,CAAC9C,CAApB;AACA,SAAOsB,CAAP;AACD,CAzHD;AAAA,IA0HIV,MAAM,GAAG,SAASA,MAAT,CAAgBwC,OAAhB,EAAyB3D,MAAzB,EAAiC4D,IAAjC,EAAuC;AAClD,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,MAAM,GAAGF,IAAI,CAACE,MADlB;AAAA,MAEIC,OAAO,GAAGH,IAAI,CAACG,OAFnB;AAAA,MAGIC,OAAO,GAAGJ,IAAI,CAACI,OAHnB;AAAA,MAIIC,WAAW,GAAGL,IAAI,CAACK,WAJvB;;AAMA,MAAI3D,CAAC,GAAGqD,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAR;AAAA,MACIpD,CAAC,GAAGoD,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CADR;AAAA,MAEIO,IAAI,GAAGnE,WAAW,CAACC,MAAD,EAAS,GAAT,CAFtB;AAAA,MAGImE,IAAI,GAAGpE,WAAW,CAACC,MAAD,EAAS,GAAT,CAHtB;AAAA,MAIIoE,WAJJ;AAAA,MAKIvC,CALJ;AAAA,MAMI0B,CANJ;;AAQA,MAAI,CAACI,OAAD,IAAY,CAACA,OAAO,CAAChE,MAAzB,EAAiC;AAC/B,WAAO9B,UAAU,CAAC,UAAD,CAAjB;AACD;;AAED,MAAIgG,KAAJ,EAAW;AACT,QAAIA,KAAK,KAAK,MAAV,IAAoB,CAACO,WAAW,GAAGnF,QAAQ,CAAC4E,KAAD,CAAR,CAAgB,CAAhB,KAAsB7D,MAArC,MAAiDA,MAAzE,EAAiF;AAC/E3B,MAAAA,gBAAgB,CAACsF,OAAD,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsBO,IAAI,GAAG5D,CAA7B,EAAgC6D,IAAI,GAAG5D,CAAvC,CAAhB;AACD,KAFD,MAEO;AACL,UAAI0D,WAAW,IAAIA,WAAW,CAAC,CAAD,CAAX,KAAmB,KAAtC,EAA6C;AAC3CnF,QAAAA,IAAI,CAACuF,GAAL,CAASrE,MAAT,EAAiB;AACfsE,UAAAA,eAAe,EAAEL,WAAW,CAAC,CAAD,CAAX,GAAiB,GAAjB,GAAuB,IAAvB,GAA8BA,WAAW,CAAC,CAAD,CAAX,GAAiB,GAA/C,GAAqD;AADvD,SAAjB;AAGD,OAJD,MAIO;AACLA,QAAAA,WAAW,GAAG,CAAClE,WAAW,CAACC,MAAD,EAAS,UAAT,CAAX,GAAkC,CAAC,GAApC,EAAyCD,WAAW,CAACC,MAAD,EAAS,UAAT,CAAX,GAAkC,CAAC,GAA5E,CAAd;AACD;;AAED6B,MAAAA,CAAC,GAAGgB,eAAe,CAAC7C,MAAD,EAASoE,WAAT,EAAsBH,WAAtB,EAAmC,MAAnC,CAAnB;AACAV,MAAAA,CAAC,GAAG1B,CAAC,CAACa,KAAF,CAAQ;AACVpC,QAAAA,CAAC,EAAEA,CADO;AAEVC,QAAAA,CAAC,EAAEA;AAFO,OAAR,CAAJ;AAIAlC,MAAAA,gBAAgB,CAACsF,OAAD,EAAU9B,CAAC,CAAC0C,CAAZ,EAAe1C,CAAC,CAAC2C,CAAjB,EAAoB3C,CAAC,CAAC4C,CAAtB,EAAyB5C,CAAC,CAAC6C,CAA3B,EAA8BR,IAAI,GAAGrC,CAAC,CAACc,CAAT,IAAcY,CAAC,CAACjD,CAAF,GAAMuB,CAAC,CAACc,CAAtB,CAA9B,EAAwDwB,IAAI,GAAGtC,CAAC,CAACe,CAAT,IAAcW,CAAC,CAAChD,CAAF,GAAMsB,CAAC,CAACe,CAAtB,CAAxD,CAAhB;AACD;AACF;;AAED,MAAIkB,MAAJ,EAAY;AACVzF,IAAAA,gBAAgB,CAACsF,OAAD,EAAUG,MAAM,CAACS,CAAjB,EAAoBT,MAAM,CAACU,CAA3B,EAA8BV,MAAM,CAACW,CAArC,EAAwCX,MAAM,CAACY,CAA/C,EAAkDZ,MAAM,CAACnB,CAAzD,EAA4DmB,MAAM,CAAClB,CAAnE,CAAhB;AACD,GAFD,MAEO,IAAImB,OAAO,IAAIC,OAAf,EAAwB;AAC7B3F,IAAAA,gBAAgB,CAACsF,OAAD,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsBI,OAAO,IAAI,CAAjC,EAAoCC,OAAO,IAAI,CAA/C,CAAhB;AACD;;AAED,SAAOL,OAAP;AACD,CAzKD;AAAA,IA0KIvC,wBAAwB,GAAG,SAASA,wBAAT,CAAkCX,MAAlC,EAA0CT,MAA1C,EAAkDR,QAAlD,EAA4DmE,OAA5D,EAAqEgB,YAArE,EAAmFC,SAAnF,EAA8F;AAC3H,MAAIC,KAAK,GAAG7E,MAAM,CAACG,KAAnB;AAAA,MACI2E,OAAO,GAAGD,KAAK,CAACC,OADpB;AAAA,MAEIC,KAAK,GAAGD,OAAO,IAAIA,OAAO,CAACE,OAAnB,IAA8BF,OAAO,CAACE,OAAR,CAAgBxF,QAAhB,CAF1C;AAAA,MAGIS,IAAI,GAAG8E,KAAK,IAAIA,KAAK,CAACE,OAAN,CAAc,GAAd,IAAqB,CAA9B,GAAkCF,KAAlC,GAA0CvF,QAHrD;AAAA,MAII0F,EAAE,GAAGzE,MAAM,CAAC0E,GAAP,GAAa,IAAIpG,SAAJ,CAAc0B,MAAM,CAAC0E,GAArB,EAA0BnF,MAA1B,EAAkCC,IAAlC,EAAwC,CAAxC,EAA2C,CAA3C,EAA8CqB,UAA9C,EAA0D,CAA1D,EAA6DuD,KAAK,CAACR,GAAN,CAAUrE,MAAV,EAAkBC,IAAlB,EAAwBQ,MAAxB,CAA7D,CAJtB;AAKAyE,EAAAA,EAAE,CAACE,CAAH,GAAOpG,QAAQ,CAAC6F,KAAK,CAACzE,GAAN,CAAUJ,MAAV,EAAkBC,IAAlB,EAAwB2E,SAAxB,CAAD,CAAR,IAAgD,CAAvD;AACAM,EAAAA,EAAE,CAACG,IAAH,GAAU1B,OAAV;AACAuB,EAAAA,EAAE,CAACI,EAAH,GAAQX,YAAR;;AAEAlE,EAAAA,MAAM,CAAC8E,MAAP,CAAchD,IAAd,CAAmBtC,IAAnB;AACD,CArLD;AAAA,IAsLIuF,cAAc,GAAG,SAASA,cAAT,CAAwBC,KAAxB,EAA+BC,GAA/B,EAAoC;AACvD,SAAO,UAAU/B,OAAV,EAAmB;AACxB,WAAO8B,KAAK,IAAIC,GAAG,KAAK,CAAjB,GAAqBxH,YAAY,CAACyF,OAAD,EAAU8B,KAAV,EAAiBC,GAAjB,CAAjC,GAAyD/B,OAAhE;AACD,GAFD;AAGD,CA1LD;;AA4LA,OAAO,IAAIgC,gBAAgB,GAAG;AAC5BC,EAAAA,OAAO,EAAE,OADmB;AAE5BC,EAAAA,IAAI,EAAE,YAFsB;AAG5BC,EAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBC,IAAlB,EAAwBC,MAAxB,EAAgCC,SAAhC,EAA2C;AACnDnH,IAAAA,IAAI,GAAGiH,IAAP;AACA/G,IAAAA,QAAQ,GAAGF,IAAI,CAACoH,KAAL,CAAWC,OAAtB;AACAlH,IAAAA,QAAQ,GAAGH,IAAI,CAACoH,KAAL,CAAWE,OAAtB;AACArH,IAAAA,SAAS,GAAGkH,SAAZ;AACD,GAR2B;AAS5BI,EAAAA,IAAI,EAAE,SAASA,IAAT,CAAcrG,MAAd,EAAsBW,IAAtB,EAA4B;AAChC,QAAI,CAAC7B,IAAL,EAAW;AACTwH,MAAAA,OAAO,CAACC,IAAR,CAAa,8CAAb;AACA,aAAO,KAAP;AACD;;AAED,QAAI,EAAE,OAAO5F,IAAP,KAAgB,QAAhB,IAA4B,CAACA,IAAI,CAAC6F,KAApC,KAA8C,CAAC7F,IAAI,CAAC0E,IAAxD,EAA8D;AAC5D1E,MAAAA,IAAI,GAAG;AACL0E,QAAAA,IAAI,EAAE1E;AADD,OAAP;AAGD;;AAED,QAAI8F,QAAQ,GAAG,EAAf;AAAA,QACIpB,IAAI,GAAG1E,IAAI,CAAC0E,IADhB;AAAA,QAEIqB,QAAQ,GAAGrB,IAAI,CAAC,CAAD,CAFnB;AAAA,QAGIsB,UAAU,GAAGhG,IAAI,CAACgG,UAHtB;AAAA,QAIIjG,MAAM,GAAG8E,cAAc,CAAC7E,IAAI,CAAC8E,KAAN,EAAa,SAAS9E,IAAT,GAAgBA,IAAI,CAAC+E,GAArB,GAA2B,CAAxC,CAJ3B;AAAA,QAKI/B,OALJ;AAAA,QAMIJ,CANJ;AAAA,QAOIjD,CAPJ;AAAA,QAQIC,CARJ;;AAUA,SAAKkG,QAAL,GAAgBA,QAAhB;AACA,SAAKzG,MAAL,GAAcA,MAAd;;AAEA,QAAI,KAAK4G,MAAL,GAAcD,UAAU,IAAIA,UAAU,KAAK,CAA/C,EAAkD;AAChD;AACA,WAAKE,OAAL,GAAe/G,UAAU,CAAC6G,UAAD,CAAV,IAA0B,CAAzC;AACA,WAAKG,OAAL,GAAe,CAAC,CAACnG,IAAI,CAACoG,UAAtB;AACA,WAAKC,KAAL,GAAarG,IAAI,CAACsG,QAAL,IAAiB,UAA9B,CAJgD,CAIN;;AAE1C,WAAKC,IAAL,GAAYlH,MAAM,CAACG,KAAP,CAAakE,GAAb,CAAiBrE,MAAjB,EAAyB,KAAKgH,KAA9B,EAAqC,IAArC,CAAZ,CANgD,CAMQ;;AAExD,WAAKG,EAAL,GAAUnI,QAAQ,CAACgB,MAAM,CAACG,KAAP,CAAaC,GAAb,CAAiBJ,MAAjB,EAAyB,KAAKgH,KAA9B,CAAD,CAAR,IAAkD,CAA5D,CARgD,CAQe;AAChE;;AAED,QAAII,KAAK,CAACC,OAAN,CAAchC,IAAd,KAAuB,EAAE,YAAYA,IAAd,CAAvB,IAA8C,OAAOqB,QAAP,KAAoB,QAAtE,EAAgF;AAC9E,WAAKnD,CAAL,IAAUmD,QAAV,EAAoB;AAClB,YAAI,CAACjI,OAAO,CAACwG,OAAR,CAAgB1B,CAAhB,CAAL,EAAyB;AACvBjD,UAAAA,CAAC,GAAGiD,CAAJ;AACD,SAFD,MAEO,IAAI,CAAC7E,OAAO,CAACuG,OAAR,CAAgB1B,CAAhB,CAAL,EAAyB;AAC9BhD,UAAAA,CAAC,GAAGgD,CAAJ;AACD;AACF;;AAED,UAAIjD,CAAC,IAAIC,CAAT,EAAY;AACV;AACAkG,QAAAA,QAAQ,CAAClE,IAAT,CAAc/B,iBAAiB,CAAC,IAAD,EAAOnB,yBAAyB,CAACA,yBAAyB,CAAC,EAAD,EAAKgG,IAAL,EAAW/E,CAAX,EAAc,CAAd,CAA1B,EAA4C+E,IAA5C,EAAkD9E,CAAlD,EAAqD,CAArD,CAAhC,EAAyFP,MAAzF,EAAiGW,IAAI,CAACL,CAAL,IAAUA,CAA3G,EAA8GK,IAAI,CAACJ,CAAL,IAAUA,CAAxH,EAA2HG,MAA3H,EAAmIC,IAAnI,CAA/B;AACD,OAHD,MAGO;AACLL,QAAAA,CAAC,GAAGC,CAAC,GAAG,CAAR;AACD;;AAED,WAAKgD,CAAL,IAAUmD,QAAV,EAAoB;AAClBnD,QAAAA,CAAC,KAAKjD,CAAN,IAAWiD,CAAC,KAAKhD,CAAjB,IAAsBkG,QAAQ,CAAClE,IAAT,CAAc/B,iBAAiB,CAAC,IAAD,EAAOnB,yBAAyB,CAAC,EAAD,EAAKgG,IAAL,EAAW9B,CAAX,EAAc,CAAd,CAAhC,EAAkDvD,MAAlD,EAA0DuD,CAA1D,EAA6D,CAA7D,EAAgE7C,MAAhE,EAAwEC,IAAxE,CAA/B,CAAtB;AACD;AACF,KAnBD,MAmBO;AACLgD,MAAAA,OAAO,GAAGjD,MAAM,CAACS,MAAM,CAACtD,UAAU,CAAC8C,IAAI,CAAC0E,IAAN,CAAX,EAAwBrF,MAAxB,EAAgCW,IAAhC,CAAP,CAAhB;AACA7C,MAAAA,wBAAwB,CAAC6F,OAAD,EAAUhD,IAAI,CAACU,UAAf,CAAxB;AACAoF,MAAAA,QAAQ,CAAClE,IAAT,CAAcoB,OAAd;;AAEAvC,MAAAA,wBAAwB,CAAC,IAAD,EAAOpB,MAAP,EAAeW,IAAI,CAACL,CAAL,IAAU,GAAzB,EAA8BqD,OAA9B,EAAuC,GAAvC,EAA4ChD,IAAI,CAACG,KAAL,IAAc,IAA1D,CAAxB;;AAEAM,MAAAA,wBAAwB,CAAC,IAAD,EAAOpB,MAAP,EAAeW,IAAI,CAACJ,CAAL,IAAU,GAAzB,EAA8BoD,OAA9B,EAAuC,GAAvC,EAA4ChD,IAAI,CAACI,KAAL,IAAc,IAA1D,CAAxB;AACD;AACF,GAzE2B;AA0E5BuG,EAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,KAAhB,EAAuBC,IAAvB,EAA6B;AACnC,QAAIf,QAAQ,GAAGe,IAAI,CAACf,QAApB;AAAA,QACI5G,CAAC,GAAG4G,QAAQ,CAAC9G,MADjB;AAAA,QAEIuF,EAAE,GAAGsC,IAAI,CAACrC,GAFd;;AAIA,QAAIoC,KAAK,GAAG,CAAZ,EAAe;AACbA,MAAAA,KAAK,GAAG,CAAR;AACD,KAFD,MAEO,IAAIA,KAAK,GAAG,CAAZ,EAAe;AACpBA,MAAAA,KAAK,GAAG,CAAR;AACD;;AAED,WAAO1H,CAAC,EAAR,EAAY;AACV9B,MAAAA,iBAAiB,CAAC0I,QAAQ,CAAC5G,CAAD,CAAT,EAAc0H,KAAd,EAAqB,CAAC1H,CAAD,IAAM2H,IAAI,CAACZ,MAAhC,EAAwCH,QAAQ,CAAC5G,CAAD,CAAhD,CAAjB;AACD;;AAED,WAAOqF,EAAP,EAAW;AACTA,MAAAA,EAAE,CAACb,GAAH,CAAOa,EAAE,CAACuC,CAAV,EAAavC,EAAE,CAAC3B,CAAhB,EAAmB2B,EAAE,CAACG,IAAH,CAAQH,EAAE,CAACI,EAAX,IAAiBJ,EAAE,CAACE,CAAvC,EAA0CF,EAAE,CAACR,CAA7C,EAAgD6C,KAAhD;AACArC,MAAAA,EAAE,GAAGA,EAAE,CAACwC,KAAR;AACD;;AAEDF,IAAAA,IAAI,CAACZ,MAAL,IAAeY,IAAI,CAACN,IAAL,CAAUM,IAAI,CAACxH,MAAf,EAAuBwH,IAAI,CAACR,KAA5B,EAAmCP,QAAQ,CAAC,CAAD,CAAR,CAAYkB,KAAZ,IAAqBH,IAAI,CAACV,OAAL,GAAenI,QAAf,GAA0B,CAA/C,IAAoD6I,IAAI,CAACX,OAAzD,GAAmEW,IAAI,CAACL,EAA3G,EAA+GK,IAA/G,EAAqHD,KAArH,CAAf;AACD,GA/F2B;AAgG5BK,EAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBvC,IAAnB,EAAyB;AAClC,WAAOvH,wBAAwB,CAACD,UAAU,CAACwH,IAAD,CAAX,CAAxB,CAA2CwC,WAAlD;AACD,GAlG2B;AAmG5B3J,EAAAA,YAAY,EAAEA,YAnGc;AAoG5BL,EAAAA,UAAU,EAAEA,UApGgB;AAqG5BG,EAAAA,eAAe,EAAEA,eArGW;AAsG5BG,EAAAA,eAAe,EAAEA,eAtGW;AAuG5BC,EAAAA,eAAe,EAAEA,eAvGW;AAwG5BC,EAAAA,gBAAgB,EAAEA,gBAxGU;AAyG5BG,EAAAA,eAAe,EAAEA,eAzGW;AA0G5BT,EAAAA,iBAAiB,EAAEA,iBA1GS;AA2G5BD,EAAAA,wBAAwB,EAAEA,wBA3GE;AA4G5BQ,EAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBwJ,OAAvB,EAAgCC,IAAhC,EAAsC;AACnD,WAAO9I,QAAQ,CAAC6I,OAAD,CAAR,CAAkBE,GAAlB,CAAsB,UAAUhI,MAAV,EAAkB;AAC7C,aAAOzB,cAAc,CAACyB,MAAD,EAAS+H,IAAI,KAAK,KAAlB,CAArB;AACD,KAFM,CAAP;AAGD,GAhH2B;AAiH5BE,EAAAA,kBAAkB,EAAE,SAASA,kBAAT,CAA4BnF,WAA5B,EAAyCC,SAAzC,EAAoDmF,KAApD,EAA2D;AAC7E,QAAIrG,CAAC,GAAGrD,eAAe,CAACuE,SAAD,EAAY,IAAZ,EAAkB,IAAlB,CAAf,CAAuCK,QAAvC,CAAgD5E,eAAe,CAACsE,WAAD,CAA/D,CAAR;AACA,WAAOoF,KAAK,GAAGrG,CAAC,CAACa,KAAF,CAAQwF,KAAR,CAAH,GAAoBrG,CAAhC;AACD,GApH2B;AAqH5BsG,EAAAA,cAAc,EAAEtF,eArHY;AAsH5BuF,EAAAA,mBAAmB,EAAE,SAASA,mBAAT,CAA6BtF,WAA7B,EAA0CC,SAA1C,EAAqDC,UAArD,EAAiEC,QAAjE,EAA2E;AAC9F,QAAIpB,CAAC,GAAGgB,eAAe,CAACC,WAAD,EAAcC,SAAd,EAAyBC,UAAzB,EAAqCC,QAArC,CAAvB;;AAEA,WAAO;AACL3C,MAAAA,CAAC,EAAEuB,CAAC,CAACc,CADA;AAELpC,MAAAA,CAAC,EAAEsB,CAAC,CAACe;AAFA,KAAP;AAID,GA7H2B;AA8H5ByF,EAAAA,cAAc,EAAE,SAASA,cAAT,CAAwBC,KAAxB,EAA+B3H,IAA/B,EAAqC;AACnDA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;;AAEA,QAAIrB,OAAO,GAAGD,yBAAyB,CAACA,yBAAyB,CAAC,EAAD,EAAKiJ,KAAL,EAAY3H,IAAI,CAACL,CAAL,IAAU,GAAtB,EAA2B,CAA3B,CAA1B,EAAyDgI,KAAzD,EAAgE3H,IAAI,CAACJ,CAAL,IAAU,GAA1E,EAA+E,CAA/E,CAAvC;;AAEAI,IAAAA,IAAI,CAACK,QAAL,IAAiBX,WAAW,CAACf,OAAD,CAA5B;AACA,WAAO,CAACqB,IAAI,CAACC,IAAL,KAAc,OAAd,GAAwBtB,OAAxB,GAAkCtB,eAAe,CAACsB,OAAD,EAAUqB,IAAI,CAACO,SAAf,CAAlD,CAAP;AACD;AArI2B,CAAvB;AAuIPhC,QAAQ,MAAMJ,IAAI,CAACM,cAAL,CAAoBuG,gBAApB,CAAd;AACA,SAASA,gBAAgB,IAAI4C,OAA7B","sourcesContent":["/*!\r\n * MotionPathPlugin 3.5.1\r\n * https://greensock.com\r\n *\r\n * @license Copyright 2008-2020, GreenSock. All rights reserved.\r\n * Subject to the terms at https://greensock.com/standard-license or for\r\n * Club GreenSock members, the agreement issued with that membership.\r\n * @author: Jack Doyle, jack@greensock.com\r\n*/\r\n\r\n/* eslint-disable */\r\nimport { getRawPath, cacheRawPathMeasurements, getPositionOnPath, pointsToSegment, flatPointsToSegment, sliceRawPath, stringToRawPath, rawPathToString, transformRawPath, convertToPath as _convertToPath } from \"./utils/paths.js\";\r\nimport { getGlobalMatrix } from \"./utils/matrix.js\";\r\n\r\nvar _xProps = [\"x\", \"translateX\", \"left\", \"marginLeft\"],\r\n    _yProps = [\"y\", \"translateY\", \"top\", \"marginTop\"],\r\n    _DEG2RAD = Math.PI / 180,\r\n    gsap,\r\n    PropTween,\r\n    _getUnit,\r\n    _toArray,\r\n    _getGSAP = function _getGSAP() {\r\n  return gsap || typeof window !== \"undefined\" && (gsap = window.gsap) && gsap.registerPlugin && gsap;\r\n},\r\n    _populateSegmentFromArray = function _populateSegmentFromArray(segment, values, property, mode) {\r\n  //mode: 0 = x but don't fill y yet, 1 = y, 2 = x and fill y with 0.\r\n  var l = values.length,\r\n      si = mode === 2 ? 0 : mode,\r\n      i = 0;\r\n\r\n  for (; i < l; i++) {\r\n    segment[si] = parseFloat(values[i][property]);\r\n    mode === 2 && (segment[si + 1] = 0);\r\n    si += 2;\r\n  }\r\n\r\n  return segment;\r\n},\r\n    _getPropNum = function _getPropNum(target, prop, unit) {\r\n  return parseFloat(target._gsap.get(target, prop, unit || \"px\")) || 0;\r\n},\r\n    _relativize = function _relativize(segment) {\r\n  var x = segment[0],\r\n      y = segment[1],\r\n      i;\r\n\r\n  for (i = 2; i < segment.length; i += 2) {\r\n    x = segment[i] += x;\r\n    y = segment[i + 1] += y;\r\n  }\r\n},\r\n    _segmentToRawPath = function _segmentToRawPath(plugin, segment, target, x, y, slicer, vars) {\r\n  if (vars.type === \"cubic\") {\r\n    segment = [segment];\r\n  } else {\r\n    segment.unshift(_getPropNum(target, x, vars.unitX), y ? _getPropNum(target, y, vars.unitY) : 0);\r\n    vars.relative && _relativize(segment);\r\n    var pointFunc = y ? pointsToSegment : flatPointsToSegment;\r\n    segment = [pointFunc(segment, vars.curviness)];\r\n  }\r\n\r\n  segment = slicer(_align(segment, target, vars));\r\n\r\n  _addDimensionalPropTween(plugin, target, x, segment, \"x\", vars.unitX);\r\n\r\n  y && _addDimensionalPropTween(plugin, target, y, segment, \"y\", vars.unitY);\r\n  return cacheRawPathMeasurements(segment, vars.resolution || (vars.curviness === 0 ? 20 : 12)); //when curviness is 0, it creates control points right on top of the anchors which makes it more sensitive to resolution, thus we change the default accordingly.\r\n},\r\n    _emptyFunc = function _emptyFunc(v) {\r\n  return v;\r\n},\r\n    _numExp = /[-+\\.]*\\d+[\\.e\\-\\+]*\\d*[e\\-\\+]*\\d*/g,\r\n    _originToPoint = function _originToPoint(element, origin, parentMatrix) {\r\n  // origin is an array of normalized values (0-1) in relation to the width/height, so [0.5, 0.5] would be the center. It can also be \"auto\" in which case it will be the top left unless it's a <path>, when it will start at the beginning of the path itself.\r\n  var m = getGlobalMatrix(element),\r\n      svg,\r\n      x,\r\n      y;\r\n\r\n  if ((element.tagName + \"\").toLowerCase() === \"svg\") {\r\n    svg = element.viewBox.baseVal;\r\n    x = svg.x;\r\n    y = svg.y;\r\n    svg.width || (svg = {\r\n      width: +element.getAttribute(\"width\"),\r\n      height: +element.getAttribute(\"height\")\r\n    });\r\n  } else {\r\n    svg = origin && element.getBBox && element.getBBox();\r\n    x = y = 0;\r\n  }\r\n\r\n  if (origin && origin !== \"auto\") {\r\n    x += origin.push ? origin[0] * (svg ? svg.width : element.offsetWidth || 0) : origin.x;\r\n    y += origin.push ? origin[1] * (svg ? svg.height : element.offsetHeight || 0) : origin.y;\r\n  }\r\n\r\n  return parentMatrix.apply(x || y ? m.apply({\r\n    x: x,\r\n    y: y\r\n  }) : {\r\n    x: m.e,\r\n    y: m.f\r\n  });\r\n},\r\n    _getAlignMatrix = function _getAlignMatrix(fromElement, toElement, fromOrigin, toOrigin) {\r\n  var parentMatrix = getGlobalMatrix(fromElement.parentNode, true, true),\r\n      m = parentMatrix.clone().multiply(getGlobalMatrix(toElement)),\r\n      fromPoint = _originToPoint(fromElement, fromOrigin, parentMatrix),\r\n      _originToPoint2 = _originToPoint(toElement, toOrigin, parentMatrix),\r\n      x = _originToPoint2.x,\r\n      y = _originToPoint2.y,\r\n      p;\r\n\r\n  m.e = m.f = 0;\r\n\r\n  if (toOrigin === \"auto\" && toElement.getTotalLength && toElement.tagName.toLowerCase() === \"path\") {\r\n    p = toElement.getAttribute(\"d\").match(_numExp) || [];\r\n    p = m.apply({\r\n      x: +p[0],\r\n      y: +p[1]\r\n    });\r\n    x += p.x;\r\n    y += p.y;\r\n  }\r\n\r\n  if (p || toElement.getBBox && fromElement.getBBox && toElement.ownerSVGElement === fromElement.ownerSVGElement) {\r\n    p = m.apply(toElement.getBBox());\r\n    x -= p.x;\r\n    y -= p.y;\r\n  }\r\n\r\n  m.e = x - fromPoint.x;\r\n  m.f = y - fromPoint.y;\r\n  return m;\r\n},\r\n    _align = function _align(rawPath, target, _ref) {\r\n  var align = _ref.align,\r\n      matrix = _ref.matrix,\r\n      offsetX = _ref.offsetX,\r\n      offsetY = _ref.offsetY,\r\n      alignOrigin = _ref.alignOrigin;\r\n\r\n  var x = rawPath[0][0],\r\n      y = rawPath[0][1],\r\n      curX = _getPropNum(target, \"x\"),\r\n      curY = _getPropNum(target, \"y\"),\r\n      alignTarget,\r\n      m,\r\n      p;\r\n\r\n  if (!rawPath || !rawPath.length) {\r\n    return getRawPath(\"M0,0L0,0\");\r\n  }\r\n\r\n  if (align) {\r\n    if (align === \"self\" || (alignTarget = _toArray(align)[0] || target) === target) {\r\n      transformRawPath(rawPath, 1, 0, 0, 1, curX - x, curY - y);\r\n    } else {\r\n      if (alignOrigin && alignOrigin[2] !== false) {\r\n        gsap.set(target, {\r\n          transformOrigin: alignOrigin[0] * 100 + \"% \" + alignOrigin[1] * 100 + \"%\"\r\n        });\r\n      } else {\r\n        alignOrigin = [_getPropNum(target, \"xPercent\") / -100, _getPropNum(target, \"yPercent\") / -100];\r\n      }\r\n\r\n      m = _getAlignMatrix(target, alignTarget, alignOrigin, \"auto\");\r\n      p = m.apply({\r\n        x: x,\r\n        y: y\r\n      });\r\n      transformRawPath(rawPath, m.a, m.b, m.c, m.d, curX + m.e - (p.x - m.e), curY + m.f - (p.y - m.f));\r\n    }\r\n  }\r\n\r\n  if (matrix) {\r\n    transformRawPath(rawPath, matrix.a, matrix.b, matrix.c, matrix.d, matrix.e, matrix.f);\r\n  } else if (offsetX || offsetY) {\r\n    transformRawPath(rawPath, 1, 0, 0, 1, offsetX || 0, offsetY || 0);\r\n  }\r\n\r\n  return rawPath;\r\n},\r\n    _addDimensionalPropTween = function _addDimensionalPropTween(plugin, target, property, rawPath, pathProperty, forceUnit) {\r\n  var cache = target._gsap,\r\n      harness = cache.harness,\r\n      alias = harness && harness.aliases && harness.aliases[property],\r\n      prop = alias && alias.indexOf(\",\") < 0 ? alias : property,\r\n      pt = plugin._pt = new PropTween(plugin._pt, target, prop, 0, 0, _emptyFunc, 0, cache.set(target, prop, plugin));\r\n  pt.u = _getUnit(cache.get(target, prop, forceUnit)) || 0;\r\n  pt.path = rawPath;\r\n  pt.pp = pathProperty;\r\n\r\n  plugin._props.push(prop);\r\n},\r\n    _sliceModifier = function _sliceModifier(start, end) {\r\n  return function (rawPath) {\r\n    return start || end !== 1 ? sliceRawPath(rawPath, start, end) : rawPath;\r\n  };\r\n};\r\n\r\nexport var MotionPathPlugin = {\r\n  version: \"3.5.1\",\r\n  name: \"motionPath\",\r\n  register: function register(core, Plugin, propTween) {\r\n    gsap = core;\r\n    _getUnit = gsap.utils.getUnit;\r\n    _toArray = gsap.utils.toArray;\r\n    PropTween = propTween;\r\n  },\r\n  init: function init(target, vars) {\r\n    if (!gsap) {\r\n      console.warn(\"Please gsap.registerPlugin(MotionPathPlugin)\");\r\n      return false;\r\n    }\r\n\r\n    if (!(typeof vars === \"object\" && !vars.style) || !vars.path) {\r\n      vars = {\r\n        path: vars\r\n      };\r\n    }\r\n\r\n    var rawPaths = [],\r\n        path = vars.path,\r\n        firstObj = path[0],\r\n        autoRotate = vars.autoRotate,\r\n        slicer = _sliceModifier(vars.start, \"end\" in vars ? vars.end : 1),\r\n        rawPath,\r\n        p,\r\n        x,\r\n        y;\r\n\r\n    this.rawPaths = rawPaths;\r\n    this.target = target;\r\n\r\n    if (this.rotate = autoRotate || autoRotate === 0) {\r\n      //get the rotational data FIRST so that the setTransform() method is called in the correct order in the render() loop - rotation gets set last.\r\n      this.rOffset = parseFloat(autoRotate) || 0;\r\n      this.radians = !!vars.useRadians;\r\n      this.rProp = vars.rotation || \"rotation\"; // rotation property\r\n\r\n      this.rSet = target._gsap.set(target, this.rProp, this); // rotation setter\r\n\r\n      this.ru = _getUnit(target._gsap.get(target, this.rProp)) || 0; // rotation units\r\n    }\r\n\r\n    if (Array.isArray(path) && !(\"closed\" in path) && typeof firstObj !== \"number\") {\r\n      for (p in firstObj) {\r\n        if (~_xProps.indexOf(p)) {\r\n          x = p;\r\n        } else if (~_yProps.indexOf(p)) {\r\n          y = p;\r\n        }\r\n      }\r\n\r\n      if (x && y) {\r\n        //correlated values\r\n        rawPaths.push(_segmentToRawPath(this, _populateSegmentFromArray(_populateSegmentFromArray([], path, x, 0), path, y, 1), target, vars.x || x, vars.y || y, slicer, vars));\r\n      } else {\r\n        x = y = 0;\r\n      }\r\n\r\n      for (p in firstObj) {\r\n        p !== x && p !== y && rawPaths.push(_segmentToRawPath(this, _populateSegmentFromArray([], path, p, 2), target, p, 0, slicer, vars));\r\n      }\r\n    } else {\r\n      rawPath = slicer(_align(getRawPath(vars.path), target, vars));\r\n      cacheRawPathMeasurements(rawPath, vars.resolution);\r\n      rawPaths.push(rawPath);\r\n\r\n      _addDimensionalPropTween(this, target, vars.x || \"x\", rawPath, \"x\", vars.unitX || \"px\");\r\n\r\n      _addDimensionalPropTween(this, target, vars.y || \"y\", rawPath, \"y\", vars.unitY || \"px\");\r\n    }\r\n  },\r\n  render: function render(ratio, data) {\r\n    var rawPaths = data.rawPaths,\r\n        i = rawPaths.length,\r\n        pt = data._pt;\r\n\r\n    if (ratio > 1) {\r\n      ratio = 1;\r\n    } else if (ratio < 0) {\r\n      ratio = 0;\r\n    }\r\n\r\n    while (i--) {\r\n      getPositionOnPath(rawPaths[i], ratio, !i && data.rotate, rawPaths[i]);\r\n    }\r\n\r\n    while (pt) {\r\n      pt.set(pt.t, pt.p, pt.path[pt.pp] + pt.u, pt.d, ratio);\r\n      pt = pt._next;\r\n    }\r\n\r\n    data.rotate && data.rSet(data.target, data.rProp, rawPaths[0].angle * (data.radians ? _DEG2RAD : 1) + data.rOffset + data.ru, data, ratio);\r\n  },\r\n  getLength: function getLength(path) {\r\n    return cacheRawPathMeasurements(getRawPath(path)).totalLength;\r\n  },\r\n  sliceRawPath: sliceRawPath,\r\n  getRawPath: getRawPath,\r\n  pointsToSegment: pointsToSegment,\r\n  stringToRawPath: stringToRawPath,\r\n  rawPathToString: rawPathToString,\r\n  transformRawPath: transformRawPath,\r\n  getGlobalMatrix: getGlobalMatrix,\r\n  getPositionOnPath: getPositionOnPath,\r\n  cacheRawPathMeasurements: cacheRawPathMeasurements,\r\n  convertToPath: function convertToPath(targets, swap) {\r\n    return _toArray(targets).map(function (target) {\r\n      return _convertToPath(target, swap !== false);\r\n    });\r\n  },\r\n  convertCoordinates: function convertCoordinates(fromElement, toElement, point) {\r\n    var m = getGlobalMatrix(toElement, true, true).multiply(getGlobalMatrix(fromElement));\r\n    return point ? m.apply(point) : m;\r\n  },\r\n  getAlignMatrix: _getAlignMatrix,\r\n  getRelativePosition: function getRelativePosition(fromElement, toElement, fromOrigin, toOrigin) {\r\n    var m = _getAlignMatrix(fromElement, toElement, fromOrigin, toOrigin);\r\n\r\n    return {\r\n      x: m.e,\r\n      y: m.f\r\n    };\r\n  },\r\n  arrayToRawPath: function arrayToRawPath(value, vars) {\r\n    vars = vars || {};\r\n\r\n    var segment = _populateSegmentFromArray(_populateSegmentFromArray([], value, vars.x || \"x\", 0), value, vars.y || \"y\", 1);\r\n\r\n    vars.relative && _relativize(segment);\r\n    return [vars.type === \"cubic\" ? segment : pointsToSegment(segment, vars.curviness)];\r\n  }\r\n};\r\n_getGSAP() && gsap.registerPlugin(MotionPathPlugin);\r\nexport { MotionPathPlugin as default };"]},"metadata":{},"sourceType":"module"}