{"ast":null,"code":"'use strict';\n\nconst internals = {\n  rfc3986: {}\n};\n\ninternals.generate = function () {\n  /**\n   * elements separated by forward slash (\"/\") are alternatives.\n   */\n  const or = '|';\n  /**\n   * Rule to support zero-padded addresses.\n   */\n\n  const zeroPad = '0?';\n  /**\n   * DIGIT = %x30-39 ; 0-9\n   */\n\n  const digit = '0-9';\n  const digitOnly = '[' + digit + ']';\n  /**\n   * ALPHA = %x41-5A / %x61-7A   ; A-Z / a-z\n   */\n\n  const alpha = 'a-zA-Z';\n  const alphaOnly = '[' + alpha + ']';\n  /**\n   * IPv4\n   * cidr       = DIGIT                ; 0-9\n   *            / %x31-32 DIGIT         ; 10-29\n   *            / \"3\" %x30-32           ; 30-32\n   */\n\n  internals.rfc3986.ipv4Cidr = digitOnly + or + '[1-2]' + digitOnly + or + '3' + '[0-2]';\n  /**\n   * IPv6\n   * cidr       = DIGIT                 ; 0-9\n   *            / %x31-39 DIGIT         ; 10-99\n   *            / \"1\" %x0-1 DIGIT       ; 100-119\n   *            / \"12\" %x0-8            ; 120-128\n   */\n\n  internals.rfc3986.ipv6Cidr = '(?:' + zeroPad + zeroPad + digitOnly + or + zeroPad + '[1-9]' + digitOnly + or + '1' + '[01]' + digitOnly + or + '12[0-8])';\n  /**\n   * HEXDIG = DIGIT / \"A\" / \"B\" / \"C\" / \"D\" / \"E\" / \"F\"\n   */\n\n  const hexDigit = digit + 'A-Fa-f';\n  const hexDigitOnly = '[' + hexDigit + ']';\n  /**\n   * unreserved = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n   */\n\n  const unreserved = alpha + digit + '-\\\\._~';\n  /**\n   * sub-delims = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\" / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n   */\n\n  const subDelims = '!\\\\$&\\'\\\\(\\\\)\\\\*\\\\+,;=';\n  /**\n   * pct-encoded = \"%\" HEXDIG HEXDIG\n   */\n\n  const pctEncoded = '%' + hexDigit;\n  /**\n   * pchar = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n   */\n\n  const pchar = unreserved + pctEncoded + subDelims + ':@';\n  const pcharOnly = '[' + pchar + ']';\n  /**\n   * squareBrackets example: []\n   */\n\n  const squareBrackets = '\\\\[\\\\]';\n  /**\n   * dec-octet   = DIGIT                 ; 0-9\n   *            / %x31-39 DIGIT         ; 10-99\n   *            / \"1\" 2DIGIT            ; 100-199\n   *            / \"2\" %x30-34 DIGIT     ; 200-249\n   *            / \"25\" %x30-35          ; 250-255\n   */\n\n  const decOctect = '(?:' + zeroPad + zeroPad + digitOnly + or + zeroPad + '[1-9]' + digitOnly + or + '1' + digitOnly + digitOnly + or + '2' + '[0-4]' + digitOnly + or + '25' + '[0-5])';\n  /**\n   * IPv4address = dec-octet \".\" dec-octet \".\" dec-octet \".\" dec-octet\n   */\n\n  internals.rfc3986.IPv4address = '(?:' + decOctect + '\\\\.){3}' + decOctect;\n  /**\n   * h16 = 1*4HEXDIG ; 16 bits of address represented in hexadecimal\n   * ls32 = ( h16 \":\" h16 ) / IPv4address ; least-significant 32 bits of address\n   * IPv6address =                            6( h16 \":\" ) ls32\n   *             /                       \"::\" 5( h16 \":\" ) ls32\n   *             / [               h16 ] \"::\" 4( h16 \":\" ) ls32\n   *             / [ *1( h16 \":\" ) h16 ] \"::\" 3( h16 \":\" ) ls32\n   *             / [ *2( h16 \":\" ) h16 ] \"::\" 2( h16 \":\" ) ls32\n   *             / [ *3( h16 \":\" ) h16 ] \"::\"    h16 \":\"   ls32\n   *             / [ *4( h16 \":\" ) h16 ] \"::\"              ls32\n   *             / [ *5( h16 \":\" ) h16 ] \"::\"              h16\n   *             / [ *6( h16 \":\" ) h16 ] \"::\"\n   */\n\n  const h16 = hexDigitOnly + '{1,4}';\n  const ls32 = '(?:' + h16 + ':' + h16 + '|' + internals.rfc3986.IPv4address + ')';\n  const IPv6SixHex = '(?:' + h16 + ':){6}' + ls32;\n  const IPv6FiveHex = '::(?:' + h16 + ':){5}' + ls32;\n  const IPv6FourHex = '(?:' + h16 + ')?::(?:' + h16 + ':){4}' + ls32;\n  const IPv6ThreeHex = '(?:(?:' + h16 + ':){0,1}' + h16 + ')?::(?:' + h16 + ':){3}' + ls32;\n  const IPv6TwoHex = '(?:(?:' + h16 + ':){0,2}' + h16 + ')?::(?:' + h16 + ':){2}' + ls32;\n  const IPv6OneHex = '(?:(?:' + h16 + ':){0,3}' + h16 + ')?::' + h16 + ':' + ls32;\n  const IPv6NoneHex = '(?:(?:' + h16 + ':){0,4}' + h16 + ')?::' + ls32;\n  const IPv6NoneHex2 = '(?:(?:' + h16 + ':){0,5}' + h16 + ')?::' + h16;\n  const IPv6NoneHex3 = '(?:(?:' + h16 + ':){0,6}' + h16 + ')?::';\n  internals.rfc3986.IPv6address = '(?:' + IPv6SixHex + or + IPv6FiveHex + or + IPv6FourHex + or + IPv6ThreeHex + or + IPv6TwoHex + or + IPv6OneHex + or + IPv6NoneHex + or + IPv6NoneHex2 + or + IPv6NoneHex3 + ')';\n  /**\n   * IPvFuture = \"v\" 1*HEXDIG \".\" 1*( unreserved / sub-delims / \":\" )\n   */\n\n  internals.rfc3986.IPvFuture = 'v' + hexDigitOnly + '+\\\\.[' + unreserved + subDelims + ':]+';\n  /**\n   * scheme = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n   */\n\n  internals.rfc3986.scheme = alphaOnly + '[' + alpha + digit + '+-\\\\.]*';\n  /**\n   * userinfo = *( unreserved / pct-encoded / sub-delims / \":\" )\n   */\n\n  const userinfo = '[' + unreserved + pctEncoded + subDelims + ':]*';\n  /**\n   * IP-literal = \"[\" ( IPv6address / IPvFuture  ) \"]\"\n   */\n\n  const IPLiteral = '\\\\[(?:' + internals.rfc3986.IPv6address + or + internals.rfc3986.IPvFuture + ')\\\\]';\n  /**\n   * reg-name = *( unreserved / pct-encoded / sub-delims )\n   */\n\n  const regName = '[' + unreserved + pctEncoded + subDelims + ']{0,255}';\n  /**\n   * host = IP-literal / IPv4address / reg-name\n   */\n\n  const host = '(?:' + IPLiteral + or + internals.rfc3986.IPv4address + or + regName + ')';\n  /**\n   * port = *DIGIT\n   */\n\n  const port = digitOnly + '*';\n  /**\n   * authority   = [ userinfo \"@\" ] host [ \":\" port ]\n   */\n\n  const authority = '(?:' + userinfo + '@)?' + host + '(?::' + port + ')?';\n  /**\n   * segment       = *pchar\n   * segment-nz    = 1*pchar\n   * path          = path-abempty    ; begins with \"/\" or is empty\n   *               / path-absolute   ; begins with \"/\" but not \"//\"\n   *               / path-noscheme   ; begins with a non-colon segment\n   *               / path-rootless   ; begins with a segment\n   *               / path-empty      ; zero characters\n   * path-abempty  = *( \"/\" segment )\n   * path-absolute = \"/\" [ segment-nz *( \"/\" segment ) ]\n   * path-rootless = segment-nz *( \"/\" segment )\n   */\n\n  const segment = pcharOnly + '*';\n  const segmentNz = pcharOnly + '+';\n  const segmentNzNc = '[' + unreserved + pctEncoded + subDelims + '@' + ']+';\n  const pathEmpty = '';\n  const pathAbEmpty = '(?:\\\\/' + segment + ')*';\n  const pathAbsolute = '\\\\/(?:' + segmentNz + pathAbEmpty + ')?';\n  const pathRootless = segmentNz + pathAbEmpty;\n  const pathNoScheme = segmentNzNc + pathAbEmpty;\n  /**\n   * hier-part = \"//\" authority path\n   */\n\n  internals.rfc3986.hierPart = '(?:' + '(?:\\\\/\\\\/' + authority + pathAbEmpty + ')' + or + pathAbsolute + or + pathRootless + ')';\n  /**\n   * relative-part = \"//\" authority path-abempty\n   *                 / path-absolute\n   *                 / path-noscheme\n   *                 / path-empty\n   */\n\n  internals.rfc3986.relativeRef = '(?:' + '(?:\\\\/\\\\/' + authority + pathAbEmpty + ')' + or + pathAbsolute + or + pathNoScheme + or + pathEmpty + ')';\n  /**\n   * query = *( pchar / \"/\" / \"?\" )\n   */\n\n  internals.rfc3986.query = '[' + pchar + '\\\\/\\\\?]*(?=#|$)'; //Finish matching either at the fragment part or end of the line.\n\n  /**\n   * query = *( pchar / \"[\" / \"]\" / \"/\" / \"?\" )\n   */\n\n  internals.rfc3986.queryWithSquareBrackets = '[' + pchar + squareBrackets + '\\\\/\\\\?]*(?=#|$)'; //Finish matching either at the fragment part or end of the line.\n\n  /**\n   * fragment = *( pchar / \"/\" / \"?\" )\n   */\n\n  internals.rfc3986.fragment = '[' + pchar + '\\\\/\\\\?]*';\n};\n\ninternals.generate();\nmodule.exports = internals.rfc3986;","map":{"version":3,"sources":["C:/Users/Asus A455L/portfolio-rizky/portfolio2/client/node_modules/@hapi/joi/lib/types/string/rfc3986.js"],"names":["internals","rfc3986","generate","or","zeroPad","digit","digitOnly","alpha","alphaOnly","ipv4Cidr","ipv6Cidr","hexDigit","hexDigitOnly","unreserved","subDelims","pctEncoded","pchar","pcharOnly","squareBrackets","decOctect","IPv4address","h16","ls32","IPv6SixHex","IPv6FiveHex","IPv6FourHex","IPv6ThreeHex","IPv6TwoHex","IPv6OneHex","IPv6NoneHex","IPv6NoneHex2","IPv6NoneHex3","IPv6address","IPvFuture","scheme","userinfo","IPLiteral","regName","host","port","authority","segment","segmentNz","segmentNzNc","pathEmpty","pathAbEmpty","pathAbsolute","pathRootless","pathNoScheme","hierPart","relativeRef","query","queryWithSquareBrackets","fragment","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst internals = {\n    rfc3986: {}\n};\n\n\ninternals.generate = function () {\n\n    /**\n     * elements separated by forward slash (\"/\") are alternatives.\n     */\n    const or = '|';\n\n    /**\n     * Rule to support zero-padded addresses.\n     */\n    const zeroPad = '0?';\n\n    /**\n     * DIGIT = %x30-39 ; 0-9\n     */\n    const digit = '0-9';\n    const digitOnly = '[' + digit + ']';\n\n    /**\n     * ALPHA = %x41-5A / %x61-7A   ; A-Z / a-z\n     */\n    const alpha = 'a-zA-Z';\n    const alphaOnly = '[' + alpha + ']';\n\n    /**\n     * IPv4\n     * cidr       = DIGIT                ; 0-9\n     *            / %x31-32 DIGIT         ; 10-29\n     *            / \"3\" %x30-32           ; 30-32\n     */\n    internals.rfc3986.ipv4Cidr = digitOnly + or + '[1-2]' + digitOnly + or + '3' + '[0-2]';\n\n    /**\n     * IPv6\n     * cidr       = DIGIT                 ; 0-9\n     *            / %x31-39 DIGIT         ; 10-99\n     *            / \"1\" %x0-1 DIGIT       ; 100-119\n     *            / \"12\" %x0-8            ; 120-128\n     */\n    internals.rfc3986.ipv6Cidr = '(?:' + zeroPad + zeroPad + digitOnly + or + zeroPad + '[1-9]' + digitOnly + or + '1' + '[01]' + digitOnly + or + '12[0-8])';\n\n    /**\n     * HEXDIG = DIGIT / \"A\" / \"B\" / \"C\" / \"D\" / \"E\" / \"F\"\n     */\n    const hexDigit = digit + 'A-Fa-f';\n    const hexDigitOnly = '[' + hexDigit + ']';\n\n    /**\n     * unreserved = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n     */\n    const unreserved = alpha + digit + '-\\\\._~';\n\n    /**\n     * sub-delims = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\" / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n     */\n    const subDelims = '!\\\\$&\\'\\\\(\\\\)\\\\*\\\\+,;=';\n\n    /**\n     * pct-encoded = \"%\" HEXDIG HEXDIG\n     */\n    const pctEncoded = '%' + hexDigit;\n\n    /**\n     * pchar = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n     */\n    const pchar = unreserved + pctEncoded + subDelims + ':@';\n    const pcharOnly = '[' + pchar + ']';\n\n    /**\n     * squareBrackets example: []\n     */\n    const squareBrackets = '\\\\[\\\\]';\n\n    /**\n     * dec-octet   = DIGIT                 ; 0-9\n     *            / %x31-39 DIGIT         ; 10-99\n     *            / \"1\" 2DIGIT            ; 100-199\n     *            / \"2\" %x30-34 DIGIT     ; 200-249\n     *            / \"25\" %x30-35          ; 250-255\n     */\n    const decOctect = '(?:' + zeroPad + zeroPad + digitOnly + or + zeroPad + '[1-9]' + digitOnly + or + '1' + digitOnly + digitOnly + or + '2' + '[0-4]' + digitOnly + or + '25' + '[0-5])';\n\n    /**\n     * IPv4address = dec-octet \".\" dec-octet \".\" dec-octet \".\" dec-octet\n     */\n    internals.rfc3986.IPv4address = '(?:' + decOctect + '\\\\.){3}' + decOctect;\n\n    /**\n     * h16 = 1*4HEXDIG ; 16 bits of address represented in hexadecimal\n     * ls32 = ( h16 \":\" h16 ) / IPv4address ; least-significant 32 bits of address\n     * IPv6address =                            6( h16 \":\" ) ls32\n     *             /                       \"::\" 5( h16 \":\" ) ls32\n     *             / [               h16 ] \"::\" 4( h16 \":\" ) ls32\n     *             / [ *1( h16 \":\" ) h16 ] \"::\" 3( h16 \":\" ) ls32\n     *             / [ *2( h16 \":\" ) h16 ] \"::\" 2( h16 \":\" ) ls32\n     *             / [ *3( h16 \":\" ) h16 ] \"::\"    h16 \":\"   ls32\n     *             / [ *4( h16 \":\" ) h16 ] \"::\"              ls32\n     *             / [ *5( h16 \":\" ) h16 ] \"::\"              h16\n     *             / [ *6( h16 \":\" ) h16 ] \"::\"\n     */\n    const h16 = hexDigitOnly + '{1,4}';\n    const ls32 = '(?:' + h16 + ':' + h16 + '|' + internals.rfc3986.IPv4address + ')';\n    const IPv6SixHex = '(?:' + h16 + ':){6}' + ls32;\n    const IPv6FiveHex = '::(?:' + h16 + ':){5}' + ls32;\n    const IPv6FourHex = '(?:' + h16 + ')?::(?:' + h16 + ':){4}' + ls32;\n    const IPv6ThreeHex = '(?:(?:' + h16 + ':){0,1}' + h16 + ')?::(?:' + h16 + ':){3}' + ls32;\n    const IPv6TwoHex = '(?:(?:' + h16 + ':){0,2}' + h16 + ')?::(?:' + h16 + ':){2}' + ls32;\n    const IPv6OneHex = '(?:(?:' + h16 + ':){0,3}' + h16 + ')?::' + h16 + ':' + ls32;\n    const IPv6NoneHex = '(?:(?:' + h16 + ':){0,4}' + h16 + ')?::' + ls32;\n    const IPv6NoneHex2 = '(?:(?:' + h16 + ':){0,5}' + h16 + ')?::' + h16;\n    const IPv6NoneHex3 = '(?:(?:' + h16 + ':){0,6}' + h16 + ')?::';\n    internals.rfc3986.IPv6address = '(?:' + IPv6SixHex + or + IPv6FiveHex + or + IPv6FourHex + or + IPv6ThreeHex + or + IPv6TwoHex + or + IPv6OneHex + or + IPv6NoneHex + or + IPv6NoneHex2 + or + IPv6NoneHex3 + ')';\n\n    /**\n     * IPvFuture = \"v\" 1*HEXDIG \".\" 1*( unreserved / sub-delims / \":\" )\n     */\n    internals.rfc3986.IPvFuture = 'v' + hexDigitOnly + '+\\\\.[' + unreserved + subDelims + ':]+';\n\n    /**\n     * scheme = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n     */\n    internals.rfc3986.scheme = alphaOnly + '[' + alpha + digit + '+-\\\\.]*';\n\n    /**\n     * userinfo = *( unreserved / pct-encoded / sub-delims / \":\" )\n     */\n    const userinfo = '[' + unreserved + pctEncoded + subDelims + ':]*';\n\n    /**\n     * IP-literal = \"[\" ( IPv6address / IPvFuture  ) \"]\"\n     */\n    const IPLiteral = '\\\\[(?:' + internals.rfc3986.IPv6address + or + internals.rfc3986.IPvFuture + ')\\\\]';\n\n    /**\n     * reg-name = *( unreserved / pct-encoded / sub-delims )\n     */\n    const regName = '[' + unreserved + pctEncoded + subDelims + ']{0,255}';\n\n    /**\n     * host = IP-literal / IPv4address / reg-name\n     */\n    const host = '(?:' + IPLiteral + or + internals.rfc3986.IPv4address + or + regName + ')';\n\n    /**\n     * port = *DIGIT\n     */\n    const port = digitOnly + '*';\n\n    /**\n     * authority   = [ userinfo \"@\" ] host [ \":\" port ]\n     */\n    const authority = '(?:' + userinfo + '@)?' + host + '(?::' + port + ')?';\n\n    /**\n     * segment       = *pchar\n     * segment-nz    = 1*pchar\n     * path          = path-abempty    ; begins with \"/\" or is empty\n     *               / path-absolute   ; begins with \"/\" but not \"//\"\n     *               / path-noscheme   ; begins with a non-colon segment\n     *               / path-rootless   ; begins with a segment\n     *               / path-empty      ; zero characters\n     * path-abempty  = *( \"/\" segment )\n     * path-absolute = \"/\" [ segment-nz *( \"/\" segment ) ]\n     * path-rootless = segment-nz *( \"/\" segment )\n     */\n    const segment = pcharOnly + '*';\n    const segmentNz = pcharOnly + '+';\n    const segmentNzNc = '[' + unreserved + pctEncoded + subDelims + '@' + ']+';\n    const pathEmpty = '';\n    const pathAbEmpty = '(?:\\\\/' + segment + ')*';\n    const pathAbsolute = '\\\\/(?:' + segmentNz + pathAbEmpty + ')?';\n    const pathRootless = segmentNz + pathAbEmpty;\n    const pathNoScheme = segmentNzNc + pathAbEmpty;\n\n    /**\n     * hier-part = \"//\" authority path\n     */\n    internals.rfc3986.hierPart = '(?:' + '(?:\\\\/\\\\/' + authority + pathAbEmpty + ')' + or + pathAbsolute + or + pathRootless + ')';\n\n    /**\n     * relative-part = \"//\" authority path-abempty\n     *                 / path-absolute\n     *                 / path-noscheme\n     *                 / path-empty\n     */\n    internals.rfc3986.relativeRef = '(?:' + '(?:\\\\/\\\\/' + authority + pathAbEmpty  + ')' + or + pathAbsolute + or + pathNoScheme + or + pathEmpty + ')';\n\n    /**\n     * query = *( pchar / \"/\" / \"?\" )\n     */\n    internals.rfc3986.query = '[' + pchar + '\\\\/\\\\?]*(?=#|$)'; //Finish matching either at the fragment part or end of the line.\n\n    /**\n     * query = *( pchar / \"[\" / \"]\" / \"/\" / \"?\" )\n     */\n    internals.rfc3986.queryWithSquareBrackets = '[' + pchar + squareBrackets + '\\\\/\\\\?]*(?=#|$)'; //Finish matching either at the fragment part or end of the line.\n\n    /**\n     * fragment = *( pchar / \"/\" / \"?\" )\n     */\n    internals.rfc3986.fragment = '[' + pchar + '\\\\/\\\\?]*';\n};\n\n\ninternals.generate();\n\nmodule.exports = internals.rfc3986;\n"]},"metadata":{},"sourceType":"script"}