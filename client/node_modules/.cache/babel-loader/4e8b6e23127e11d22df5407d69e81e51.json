{"ast":null,"code":"'use strict';\n\nconst Hoek = require('@hapi/hoek');\n\nconst Any = require('../any');\n\nconst internals = {};\ninternals.Lazy = class extends Any {\n  constructor() {\n    super();\n    this._type = 'lazy';\n    this._flags.once = true;\n    this._cache = null;\n  }\n\n  _init(fn, options) {\n    return this.set(fn, options);\n  }\n\n  _base(value, state, options) {\n    let schema;\n\n    if (this._cache) {\n      schema = this._cache;\n    } else {\n      const result = {\n        value\n      };\n      const lazy = this._flags.lazy;\n\n      if (!lazy) {\n        result.errors = this.createError('lazy.base', null, state, options);\n        return result;\n      }\n\n      schema = lazy();\n\n      if (!(schema instanceof Any)) {\n        result.errors = this.createError('lazy.schema', {\n          schema\n        }, state, options);\n        return result;\n      }\n\n      if (this._flags.once) {\n        this._cache = schema;\n      }\n    }\n\n    return schema._validate(value, state, options);\n  }\n\n  set(fn, options) {\n    Hoek.assert(typeof fn === 'function', 'You must provide a function as first argument');\n    Hoek.assert(options === undefined || options && typeof options === 'object' && !Array.isArray(options), `Options must be an object`);\n\n    if (options) {\n      const unknownOptions = Object.keys(options).filter(key => !['once'].includes(key));\n      Hoek.assert(unknownOptions.length === 0, `Options contain unknown keys: ${unknownOptions}`);\n      Hoek.assert(options.once === undefined || typeof options.once === 'boolean', 'Option \"once\" must be a boolean');\n    }\n\n    const obj = this.clone();\n    obj._flags.lazy = fn;\n\n    if (options && options.once !== obj._flags.once) {\n      obj._flags.once = options.once;\n    }\n\n    return obj;\n  }\n\n};\nmodule.exports = new internals.Lazy();","map":{"version":3,"sources":["C:/Users/Asus A455L/portfolio-rizky/portfolio2/client/node_modules/@hapi/joi/lib/types/lazy/index.js"],"names":["Hoek","require","Any","internals","Lazy","constructor","_type","_flags","once","_cache","_init","fn","options","set","_base","value","state","schema","result","lazy","errors","createError","_validate","assert","undefined","Array","isArray","unknownOptions","Object","keys","filter","key","includes","length","obj","clone","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,YAAD,CAApB;;AAEA,MAAMC,GAAG,GAAGD,OAAO,CAAC,QAAD,CAAnB;;AAGA,MAAME,SAAS,GAAG,EAAlB;AAGAA,SAAS,CAACC,IAAV,GAAiB,cAAcF,GAAd,CAAkB;AAE/BG,EAAAA,WAAW,GAAG;AAEV;AACA,SAAKC,KAAL,GAAa,MAAb;AACA,SAAKC,MAAL,CAAYC,IAAZ,GAAmB,IAAnB;AACA,SAAKC,MAAL,GAAc,IAAd;AACH;;AAEDC,EAAAA,KAAK,CAACC,EAAD,EAAKC,OAAL,EAAc;AAEf,WAAO,KAAKC,GAAL,CAASF,EAAT,EAAaC,OAAb,CAAP;AACH;;AAEDE,EAAAA,KAAK,CAACC,KAAD,EAAQC,KAAR,EAAeJ,OAAf,EAAwB;AAEzB,QAAIK,MAAJ;;AACA,QAAI,KAAKR,MAAT,EAAiB;AACbQ,MAAAA,MAAM,GAAG,KAAKR,MAAd;AACH,KAFD,MAGK;AACD,YAAMS,MAAM,GAAG;AAAEH,QAAAA;AAAF,OAAf;AACA,YAAMI,IAAI,GAAG,KAAKZ,MAAL,CAAYY,IAAzB;;AAEA,UAAI,CAACA,IAAL,EAAW;AACPD,QAAAA,MAAM,CAACE,MAAP,GAAgB,KAAKC,WAAL,CAAiB,WAAjB,EAA8B,IAA9B,EAAoCL,KAApC,EAA2CJ,OAA3C,CAAhB;AACA,eAAOM,MAAP;AACH;;AAEDD,MAAAA,MAAM,GAAGE,IAAI,EAAb;;AAEA,UAAI,EAAEF,MAAM,YAAYf,GAApB,CAAJ,EAA8B;AAC1BgB,QAAAA,MAAM,CAACE,MAAP,GAAgB,KAAKC,WAAL,CAAiB,aAAjB,EAAgC;AAAEJ,UAAAA;AAAF,SAAhC,EAA4CD,KAA5C,EAAmDJ,OAAnD,CAAhB;AACA,eAAOM,MAAP;AACH;;AAED,UAAI,KAAKX,MAAL,CAAYC,IAAhB,EAAsB;AAClB,aAAKC,MAAL,GAAcQ,MAAd;AACH;AACJ;;AAED,WAAOA,MAAM,CAACK,SAAP,CAAiBP,KAAjB,EAAwBC,KAAxB,EAA+BJ,OAA/B,CAAP;AACH;;AAEDC,EAAAA,GAAG,CAACF,EAAD,EAAKC,OAAL,EAAc;AAEbZ,IAAAA,IAAI,CAACuB,MAAL,CAAY,OAAOZ,EAAP,KAAc,UAA1B,EAAsC,+CAAtC;AACAX,IAAAA,IAAI,CAACuB,MAAL,CAAYX,OAAO,KAAKY,SAAZ,IAA0BZ,OAAO,IAAI,OAAOA,OAAP,KAAmB,QAA9B,IAA0C,CAACa,KAAK,CAACC,OAAN,CAAcd,OAAd,CAAjF,EAA2G,2BAA3G;;AAEA,QAAIA,OAAJ,EAAa;AACT,YAAMe,cAAc,GAAGC,MAAM,CAACC,IAAP,CAAYjB,OAAZ,EAAqBkB,MAArB,CAA6BC,GAAD,IAAS,CAAC,CAAC,MAAD,EAASC,QAAT,CAAkBD,GAAlB,CAAtC,CAAvB;AACA/B,MAAAA,IAAI,CAACuB,MAAL,CAAYI,cAAc,CAACM,MAAf,KAA0B,CAAtC,EAA0C,iCAAgCN,cAAe,EAAzF;AACA3B,MAAAA,IAAI,CAACuB,MAAL,CAAYX,OAAO,CAACJ,IAAR,KAAiBgB,SAAjB,IAA8B,OAAOZ,OAAO,CAACJ,IAAf,KAAwB,SAAlE,EAA6E,iCAA7E;AACH;;AAED,UAAM0B,GAAG,GAAG,KAAKC,KAAL,EAAZ;AACAD,IAAAA,GAAG,CAAC3B,MAAJ,CAAWY,IAAX,GAAkBR,EAAlB;;AAEA,QAAIC,OAAO,IAAIA,OAAO,CAACJ,IAAR,KAAiB0B,GAAG,CAAC3B,MAAJ,CAAWC,IAA3C,EAAiD;AAC7C0B,MAAAA,GAAG,CAAC3B,MAAJ,CAAWC,IAAX,GAAkBI,OAAO,CAACJ,IAA1B;AACH;;AAED,WAAO0B,GAAP;AACH;;AAhE8B,CAAnC;AAoEAE,MAAM,CAACC,OAAP,GAAiB,IAAIlC,SAAS,CAACC,IAAd,EAAjB","sourcesContent":["'use strict';\n\nconst Hoek = require('@hapi/hoek');\n\nconst Any = require('../any');\n\n\nconst internals = {};\n\n\ninternals.Lazy = class extends Any {\n\n    constructor() {\n\n        super();\n        this._type = 'lazy';\n        this._flags.once = true;\n        this._cache = null;\n    }\n\n    _init(fn, options) {\n\n        return this.set(fn, options);\n    }\n\n    _base(value, state, options) {\n\n        let schema;\n        if (this._cache) {\n            schema = this._cache;\n        }\n        else {\n            const result = { value };\n            const lazy = this._flags.lazy;\n\n            if (!lazy) {\n                result.errors = this.createError('lazy.base', null, state, options);\n                return result;\n            }\n\n            schema = lazy();\n\n            if (!(schema instanceof Any)) {\n                result.errors = this.createError('lazy.schema', { schema }, state, options);\n                return result;\n            }\n\n            if (this._flags.once) {\n                this._cache = schema;\n            }\n        }\n\n        return schema._validate(value, state, options);\n    }\n\n    set(fn, options) {\n\n        Hoek.assert(typeof fn === 'function', 'You must provide a function as first argument');\n        Hoek.assert(options === undefined || (options && typeof options === 'object' && !Array.isArray(options)), `Options must be an object`);\n\n        if (options) {\n            const unknownOptions = Object.keys(options).filter((key) => !['once'].includes(key));\n            Hoek.assert(unknownOptions.length === 0, `Options contain unknown keys: ${unknownOptions}`);\n            Hoek.assert(options.once === undefined || typeof options.once === 'boolean', 'Option \"once\" must be a boolean');\n        }\n\n        const obj = this.clone();\n        obj._flags.lazy = fn;\n\n        if (options && options.once !== obj._flags.once) {\n            obj._flags.once = options.once;\n        }\n\n        return obj;\n    }\n\n};\n\nmodule.exports = new internals.Lazy();\n"]},"metadata":{},"sourceType":"script"}