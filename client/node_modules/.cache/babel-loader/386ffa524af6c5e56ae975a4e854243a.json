{"ast":null,"code":"'use strict';\n\nconst Hoek = require('@hapi/hoek');\n\nconst Any = require('../any');\n\nconst Ref = require('../../ref');\n\nconst internals = {\n  precisionRx: /(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/,\n\n  normalizeExponent(str) {\n    return str.replace(/\\.?0+e/, 'e').replace(/e\\+/, 'e').replace(/^\\+/, '').replace(/^(-?)0+([1-9])/, '$1$2');\n  },\n\n  normalizeDecimal(str) {\n    str = str.replace(/^\\+/, '').replace(/\\.0+$/, '').replace(/^(-?)0+([1-9])/, '$1$2');\n\n    if (str.includes('.') && str.endsWith('0')) {\n      str = str.replace(/0+$/, '');\n    }\n\n    return str;\n  }\n\n};\ninternals.Number = class extends Any {\n  constructor() {\n    super();\n    this._type = 'number';\n    this._flags.unsafe = false;\n\n    this._invalids.add(Infinity);\n\n    this._invalids.add(-Infinity);\n  }\n\n  _base(value, state, options) {\n    const result = {\n      errors: null,\n      value\n    };\n\n    if (typeof value === 'string' && options.convert) {\n      const matches = value.match(/^\\s*[+-]?\\d+(?:\\.\\d+)?(?:e([+-]?\\d+))?\\s*$/i);\n\n      if (matches) {\n        value = value.trim();\n        result.value = parseFloat(value);\n\n        if (!this._flags.unsafe) {\n          if (value.includes('e')) {\n            if (internals.normalizeExponent(`${result.value / Math.pow(10, matches[1])}e${matches[1]}`) !== internals.normalizeExponent(value)) {\n              result.errors = this.createError('number.unsafe', {\n                value\n              }, state, options);\n              return result;\n            }\n          } else {\n            if (result.value.toString() !== internals.normalizeDecimal(value)) {\n              result.errors = this.createError('number.unsafe', {\n                value\n              }, state, options);\n              return result;\n            }\n          }\n        }\n      }\n    }\n\n    const isNumber = typeof result.value === 'number' && !isNaN(result.value);\n\n    if (options.convert && 'precision' in this._flags && isNumber) {\n      // This is conceptually equivalent to using toFixed but it should be much faster\n      const precision = Math.pow(10, this._flags.precision);\n      result.value = Math.round(result.value * precision) / precision;\n    }\n\n    if (isNumber) {\n      if (!this._flags.unsafe && (value > Number.MAX_SAFE_INTEGER || value < Number.MIN_SAFE_INTEGER)) {\n        result.errors = this.createError('number.unsafe', {\n          value\n        }, state, options);\n      }\n    } else {\n      result.errors = this.createError('number.base', {\n        value\n      }, state, options);\n    }\n\n    return result;\n  }\n\n  multiple(base) {\n    const isRef = Ref.isRef(base);\n\n    if (!isRef) {\n      Hoek.assert(typeof base === 'number' && isFinite(base), 'multiple must be a number');\n      Hoek.assert(base > 0, 'multiple must be greater than 0');\n    }\n\n    return this._test('multiple', base, function (value, state, options) {\n      const divisor = isRef ? base(state.reference || state.parent, options) : base;\n\n      if (isRef && (typeof divisor !== 'number' || !isFinite(divisor))) {\n        return this.createError('number.ref', {\n          ref: base.key\n        }, state, options);\n      }\n\n      if (value % divisor === 0) {\n        return value;\n      }\n\n      return this.createError('number.multiple', {\n        multiple: base,\n        value\n      }, state, options);\n    });\n  }\n\n  integer() {\n    return this._test('integer', undefined, function (value, state, options) {\n      return Math.trunc(value) - value === 0 ? value : this.createError('number.integer', {\n        value\n      }, state, options);\n    });\n  }\n\n  unsafe(enabled = true) {\n    Hoek.assert(typeof enabled === 'boolean', 'enabled must be a boolean');\n\n    if (this._flags.unsafe === enabled) {\n      return this;\n    }\n\n    const obj = this.clone();\n    obj._flags.unsafe = enabled;\n    return obj;\n  }\n\n  negative() {\n    return this._test('negative', undefined, function (value, state, options) {\n      if (value < 0) {\n        return value;\n      }\n\n      return this.createError('number.negative', {\n        value\n      }, state, options);\n    });\n  }\n\n  positive() {\n    return this._test('positive', undefined, function (value, state, options) {\n      if (value > 0) {\n        return value;\n      }\n\n      return this.createError('number.positive', {\n        value\n      }, state, options);\n    });\n  }\n\n  precision(limit) {\n    Hoek.assert(Number.isSafeInteger(limit), 'limit must be an integer');\n    Hoek.assert(!('precision' in this._flags), 'precision already set');\n\n    const obj = this._test('precision', limit, function (value, state, options) {\n      const places = value.toString().match(internals.precisionRx);\n      const decimals = Math.max((places[1] ? places[1].length : 0) - (places[2] ? parseInt(places[2], 10) : 0), 0);\n\n      if (decimals <= limit) {\n        return value;\n      }\n\n      return this.createError('number.precision', {\n        limit,\n        value\n      }, state, options);\n    });\n\n    obj._flags.precision = limit;\n    return obj;\n  }\n\n  port() {\n    return this._test('port', undefined, function (value, state, options) {\n      if (!Number.isSafeInteger(value) || value < 0 || value > 65535) {\n        return this.createError('number.port', {\n          value\n        }, state, options);\n      }\n\n      return value;\n    });\n  }\n\n};\n\ninternals.compare = function (type, compare) {\n  return function (limit) {\n    const isRef = Ref.isRef(limit);\n    const isNumber = typeof limit === 'number' && !isNaN(limit);\n    Hoek.assert(isNumber || isRef, 'limit must be a number or reference');\n    return this._test(type, limit, function (value, state, options) {\n      let compareTo;\n\n      if (isRef) {\n        compareTo = limit(state.reference || state.parent, options);\n\n        if (!(typeof compareTo === 'number' && !isNaN(compareTo))) {\n          return this.createError('number.ref', {\n            ref: limit.key\n          }, state, options);\n        }\n      } else {\n        compareTo = limit;\n      }\n\n      if (compare(value, compareTo)) {\n        return value;\n      }\n\n      return this.createError('number.' + type, {\n        limit: compareTo,\n        value\n      }, state, options);\n    });\n  };\n};\n\ninternals.Number.prototype.min = internals.compare('min', (value, limit) => value >= limit);\ninternals.Number.prototype.max = internals.compare('max', (value, limit) => value <= limit);\ninternals.Number.prototype.greater = internals.compare('greater', (value, limit) => value > limit);\ninternals.Number.prototype.less = internals.compare('less', (value, limit) => value < limit);\nmodule.exports = new internals.Number();","map":{"version":3,"sources":["C:/Users/Asus A455L/portfolio-rizky/portfolio2/client/node_modules/@hapi/joi/lib/types/number/index.js"],"names":["Hoek","require","Any","Ref","internals","precisionRx","normalizeExponent","str","replace","normalizeDecimal","includes","endsWith","Number","constructor","_type","_flags","unsafe","_invalids","add","Infinity","_base","value","state","options","result","errors","convert","matches","match","trim","parseFloat","Math","pow","createError","toString","isNumber","isNaN","precision","round","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","multiple","base","isRef","assert","isFinite","_test","divisor","reference","parent","ref","key","integer","undefined","trunc","enabled","obj","clone","negative","positive","limit","isSafeInteger","places","decimals","max","length","parseInt","port","compare","type","compareTo","prototype","min","greater","less","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Hoek = require('@hapi/hoek');\n\nconst Any = require('../any');\nconst Ref = require('../../ref');\n\n\nconst internals = {\n    precisionRx: /(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/,\n    normalizeExponent(str) {\n\n        return str\n            .replace(/\\.?0+e/, 'e')\n            .replace(/e\\+/, 'e')\n            .replace(/^\\+/, '')\n            .replace(/^(-?)0+([1-9])/, '$1$2');\n    },\n    normalizeDecimal(str) {\n\n        str = str\n            .replace(/^\\+/, '')\n            .replace(/\\.0+$/, '')\n            .replace(/^(-?)0+([1-9])/, '$1$2');\n\n        if (str.includes('.') && str.endsWith('0')) {\n            str = str.replace(/0+$/, '');\n        }\n\n        return str;\n    }\n};\n\n\ninternals.Number = class extends Any {\n\n    constructor() {\n\n        super();\n        this._type = 'number';\n        this._flags.unsafe = false;\n        this._invalids.add(Infinity);\n        this._invalids.add(-Infinity);\n    }\n\n    _base(value, state, options) {\n\n        const result = {\n            errors: null,\n            value\n        };\n\n        if (typeof value === 'string' &&\n            options.convert) {\n\n            const matches = value.match(/^\\s*[+-]?\\d+(?:\\.\\d+)?(?:e([+-]?\\d+))?\\s*$/i);\n            if (matches) {\n\n                value = value.trim();\n                result.value = parseFloat(value);\n\n                if (!this._flags.unsafe) {\n                    if (value.includes('e')) {\n                        if (internals.normalizeExponent(`${result.value / Math.pow(10, matches[1])}e${matches[1]}`) !== internals.normalizeExponent(value)) {\n                            result.errors = this.createError('number.unsafe', { value }, state, options);\n                            return result;\n                        }\n                    }\n                    else {\n                        if (result.value.toString() !== internals.normalizeDecimal(value)) {\n                            result.errors = this.createError('number.unsafe', { value }, state, options);\n                            return result;\n                        }\n                    }\n                }\n            }\n        }\n\n        const isNumber = typeof result.value === 'number' && !isNaN(result.value);\n\n        if (options.convert && 'precision' in this._flags && isNumber) {\n\n            // This is conceptually equivalent to using toFixed but it should be much faster\n            const precision = Math.pow(10, this._flags.precision);\n            result.value = Math.round(result.value * precision) / precision;\n        }\n\n        if (isNumber) {\n            if (!this._flags.unsafe &&\n                (value > Number.MAX_SAFE_INTEGER || value < Number.MIN_SAFE_INTEGER)) {\n                result.errors = this.createError('number.unsafe', { value }, state, options);\n            }\n        }\n        else {\n            result.errors = this.createError('number.base', { value }, state, options);\n        }\n\n        return result;\n    }\n\n    multiple(base) {\n\n        const isRef = Ref.isRef(base);\n\n        if (!isRef) {\n            Hoek.assert(typeof base === 'number' && isFinite(base), 'multiple must be a number');\n            Hoek.assert(base > 0, 'multiple must be greater than 0');\n        }\n\n        return this._test('multiple', base, function (value, state, options) {\n\n            const divisor = isRef ? base(state.reference || state.parent, options) : base;\n\n            if (isRef && (typeof divisor !== 'number' || !isFinite(divisor))) {\n                return this.createError('number.ref', { ref: base.key }, state, options);\n            }\n\n            if (value % divisor === 0) {\n                return value;\n            }\n\n            return this.createError('number.multiple', { multiple: base, value }, state, options);\n        });\n    }\n\n    integer() {\n\n        return this._test('integer', undefined, function (value, state, options) {\n\n            return Math.trunc(value) - value === 0 ? value : this.createError('number.integer', { value }, state, options);\n        });\n    }\n\n    unsafe(enabled = true) {\n\n        Hoek.assert(typeof enabled === 'boolean', 'enabled must be a boolean');\n\n        if (this._flags.unsafe === enabled) {\n            return this;\n        }\n\n        const obj = this.clone();\n        obj._flags.unsafe = enabled;\n        return obj;\n    }\n\n    negative() {\n\n        return this._test('negative', undefined, function (value, state, options) {\n\n            if (value < 0) {\n                return value;\n            }\n\n            return this.createError('number.negative', { value }, state, options);\n        });\n    }\n\n    positive() {\n\n        return this._test('positive', undefined, function (value, state, options) {\n\n            if (value > 0) {\n                return value;\n            }\n\n            return this.createError('number.positive', { value }, state, options);\n        });\n    }\n\n    precision(limit) {\n\n        Hoek.assert(Number.isSafeInteger(limit), 'limit must be an integer');\n        Hoek.assert(!('precision' in this._flags), 'precision already set');\n\n        const obj = this._test('precision', limit, function (value, state, options) {\n\n            const places = value.toString().match(internals.precisionRx);\n            const decimals = Math.max((places[1] ? places[1].length : 0) - (places[2] ? parseInt(places[2], 10) : 0), 0);\n            if (decimals <= limit) {\n                return value;\n            }\n\n            return this.createError('number.precision', { limit, value }, state, options);\n        });\n\n        obj._flags.precision = limit;\n        return obj;\n    }\n\n    port() {\n\n        return this._test('port', undefined, function (value, state, options) {\n\n            if (!Number.isSafeInteger(value) || value < 0 || value > 65535) {\n                return this.createError('number.port', { value }, state, options);\n            }\n\n            return value;\n        });\n    }\n\n};\n\n\ninternals.compare = function (type, compare) {\n\n    return function (limit) {\n\n        const isRef = Ref.isRef(limit);\n        const isNumber = typeof limit === 'number' && !isNaN(limit);\n\n        Hoek.assert(isNumber || isRef, 'limit must be a number or reference');\n\n        return this._test(type, limit, function (value, state, options) {\n\n            let compareTo;\n            if (isRef) {\n                compareTo = limit(state.reference || state.parent, options);\n\n                if (!(typeof compareTo === 'number' && !isNaN(compareTo))) {\n                    return this.createError('number.ref', { ref: limit.key }, state, options);\n                }\n            }\n            else {\n                compareTo = limit;\n            }\n\n            if (compare(value, compareTo)) {\n                return value;\n            }\n\n            return this.createError('number.' + type, { limit: compareTo, value }, state, options);\n        });\n    };\n};\n\n\ninternals.Number.prototype.min = internals.compare('min', (value, limit) => value >= limit);\ninternals.Number.prototype.max = internals.compare('max', (value, limit) => value <= limit);\ninternals.Number.prototype.greater = internals.compare('greater', (value, limit) => value > limit);\ninternals.Number.prototype.less = internals.compare('less', (value, limit) => value < limit);\n\n\nmodule.exports = new internals.Number();\n"]},"metadata":{},"sourceType":"script"}