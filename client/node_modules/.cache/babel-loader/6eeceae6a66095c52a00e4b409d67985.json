{"ast":null,"code":"'use strict';\n\nconst Bourne = require('@hapi/bourne');\n\nconst Hoek = require('@hapi/hoek');\n\nconst Any = require('../any');\n\nconst Cast = require('../../cast');\n\nconst Ref = require('../../ref');\n\nconst State = require('../state');\n\nconst internals = {};\n\ninternals.fastSplice = function (arr, i) {\n  let pos = i;\n\n  while (pos < arr.length) {\n    arr[pos++] = arr[pos];\n  }\n\n  --arr.length;\n};\n\ninternals.Array = class extends Any {\n  constructor() {\n    super();\n    this._type = 'array';\n    this._inner.items = [];\n    this._inner.ordereds = [];\n    this._inner.inclusions = [];\n    this._inner.exclusions = [];\n    this._inner.requireds = [];\n    this._flags.sparse = false;\n  }\n\n  _base(value, state, options) {\n    const result = {\n      value\n    };\n\n    if (typeof value === 'string' && options.convert) {\n      if (value.length > 1 && (value[0] === '[' || /^\\s*\\[/.test(value))) {\n        try {\n          result.value = Bourne.parse(value);\n        } catch (e) {}\n      }\n    }\n\n    let isArray = Array.isArray(result.value);\n    const wasArray = isArray;\n\n    if (options.convert && this._flags.single && !isArray) {\n      result.value = [result.value];\n      isArray = true;\n    }\n\n    if (!isArray) {\n      result.errors = this.createError('array.base', null, state, options);\n      return result;\n    }\n\n    if (this._inner.inclusions.length || this._inner.exclusions.length || this._inner.requireds.length || this._inner.ordereds.length || !this._flags.sparse) {\n      // Clone the array so that we don't modify the original\n      if (wasArray) {\n        result.value = result.value.slice(0);\n      }\n\n      result.errors = this._checkItems(result.value, wasArray, state, options);\n\n      if (result.errors && wasArray && options.convert && this._flags.single) {\n        // Attempt a 2nd pass by putting the array inside one.\n        const previousErrors = result.errors;\n        result.value = [result.value];\n        result.errors = this._checkItems(result.value, wasArray, state, options);\n\n        if (result.errors) {\n          // Restore previous errors and value since this didn't validate either.\n          result.errors = previousErrors;\n          result.value = result.value[0];\n        }\n      }\n    }\n\n    return result;\n  }\n\n  _checkItems(items, wasArray, state, options) {\n    const errors = [];\n    let errored;\n\n    const requireds = this._inner.requireds.slice();\n\n    const ordereds = this._inner.ordereds.slice();\n\n    const inclusions = [...this._inner.inclusions, ...requireds];\n    let il = items.length;\n\n    for (let i = 0; i < il; ++i) {\n      errored = false;\n      const item = items[i];\n      let isValid = false;\n      const key = wasArray ? i : state.key;\n      const path = wasArray ? [...state.path, i] : state.path;\n      const localState = new State(key, path, state.parent, state.reference);\n      let res; // Sparse\n\n      if (!this._flags.sparse && item === undefined) {\n        errors.push(this.createError('array.sparse', null, {\n          key: state.key,\n          path: localState.path,\n          pos: i\n        }, options));\n\n        if (options.abortEarly) {\n          return errors;\n        }\n\n        ordereds.shift();\n        continue;\n      } // Exclusions\n\n\n      for (let j = 0; j < this._inner.exclusions.length; ++j) {\n        res = this._inner.exclusions[j]._validate(item, localState, {}); // Not passing options to use defaults\n\n        if (!res.errors) {\n          errors.push(this.createError(wasArray ? 'array.excludes' : 'array.excludesSingle', {\n            pos: i,\n            value: item\n          }, {\n            key: state.key,\n            path: localState.path\n          }, options));\n          errored = true;\n\n          if (options.abortEarly) {\n            return errors;\n          }\n\n          ordereds.shift();\n          break;\n        }\n      }\n\n      if (errored) {\n        continue;\n      } // Ordered\n\n\n      if (this._inner.ordereds.length) {\n        if (ordereds.length > 0) {\n          const ordered = ordereds.shift();\n          res = ordered._validate(item, localState, options);\n\n          if (!res.errors) {\n            if (ordered._flags.strip) {\n              internals.fastSplice(items, i);\n              --i;\n              --il;\n            } else if (!this._flags.sparse && res.value === undefined) {\n              errors.push(this.createError('array.sparse', null, {\n                key: state.key,\n                path: localState.path,\n                pos: i\n              }, options));\n\n              if (options.abortEarly) {\n                return errors;\n              }\n\n              continue;\n            } else {\n              items[i] = res.value;\n            }\n          } else {\n            errors.push(this.createError('array.ordered', {\n              pos: i,\n              reason: res.errors,\n              value: item\n            }, {\n              key: state.key,\n              path: localState.path\n            }, options));\n\n            if (options.abortEarly) {\n              return errors;\n            }\n          }\n\n          continue;\n        } else if (!this._inner.items.length) {\n          errors.push(this.createError('array.orderedLength', {\n            pos: i,\n            limit: this._inner.ordereds.length\n          }, {\n            key: state.key,\n            path: localState.path\n          }, options));\n\n          if (options.abortEarly) {\n            return errors;\n          }\n\n          continue;\n        }\n      } // Requireds\n\n\n      const requiredChecks = [];\n      let jl = requireds.length;\n\n      for (let j = 0; j < jl; ++j) {\n        res = requiredChecks[j] = requireds[j]._validate(item, localState, options);\n\n        if (!res.errors) {\n          items[i] = res.value;\n          isValid = true;\n          internals.fastSplice(requireds, j);\n          --j;\n          --jl;\n\n          if (!this._flags.sparse && res.value === undefined) {\n            errors.push(this.createError('array.sparse', null, {\n              key: state.key,\n              path: localState.path,\n              pos: i\n            }, options));\n\n            if (options.abortEarly) {\n              return errors;\n            }\n          }\n\n          break;\n        }\n      }\n\n      if (isValid) {\n        continue;\n      } // Inclusions\n\n\n      const stripUnknown = options.stripUnknown && !!options.stripUnknown.arrays || false;\n      jl = inclusions.length;\n\n      for (let j = 0; j < jl; ++j) {\n        const inclusion = inclusions[j]; // Avoid re-running requireds that already didn't match in the previous loop\n\n        const previousCheck = requireds.indexOf(inclusion);\n\n        if (previousCheck !== -1) {\n          res = requiredChecks[previousCheck];\n        } else {\n          res = inclusion._validate(item, localState, options);\n\n          if (!res.errors) {\n            if (inclusion._flags.strip) {\n              internals.fastSplice(items, i);\n              --i;\n              --il;\n            } else if (!this._flags.sparse && res.value === undefined) {\n              errors.push(this.createError('array.sparse', null, {\n                key: state.key,\n                path: localState.path,\n                pos: i\n              }, options));\n              errored = true;\n            } else {\n              items[i] = res.value;\n            }\n\n            isValid = true;\n            break;\n          }\n        } // Return the actual error if only one inclusion defined\n\n\n        if (jl === 1) {\n          if (stripUnknown) {\n            internals.fastSplice(items, i);\n            --i;\n            --il;\n            isValid = true;\n            break;\n          }\n\n          errors.push(this.createError(wasArray ? 'array.includesOne' : 'array.includesOneSingle', {\n            pos: i,\n            reason: res.errors,\n            value: item\n          }, {\n            key: state.key,\n            path: localState.path\n          }, options));\n          errored = true;\n\n          if (options.abortEarly) {\n            return errors;\n          }\n\n          break;\n        }\n      }\n\n      if (errored) {\n        continue;\n      }\n\n      if (this._inner.inclusions.length && !isValid) {\n        if (stripUnknown) {\n          internals.fastSplice(items, i);\n          --i;\n          --il;\n          continue;\n        }\n\n        errors.push(this.createError(wasArray ? 'array.includes' : 'array.includesSingle', {\n          pos: i,\n          value: item\n        }, {\n          key: state.key,\n          path: localState.path\n        }, options));\n\n        if (options.abortEarly) {\n          return errors;\n        }\n      }\n    }\n\n    if (requireds.length) {\n      this._fillMissedErrors(errors, requireds, state, options);\n    }\n\n    if (ordereds.length) {\n      this._fillOrderedErrors(errors, ordereds, state, options);\n    }\n\n    return errors.length ? errors : null;\n  }\n\n  describe() {\n    const description = super.describe();\n\n    if (this._inner.ordereds.length) {\n      description.orderedItems = [];\n\n      for (let i = 0; i < this._inner.ordereds.length; ++i) {\n        description.orderedItems.push(this._inner.ordereds[i].describe());\n      }\n    }\n\n    if (this._inner.items.length) {\n      description.items = [];\n\n      for (let i = 0; i < this._inner.items.length; ++i) {\n        description.items.push(this._inner.items[i].describe());\n      }\n    }\n\n    if (description.rules) {\n      for (let i = 0; i < description.rules.length; ++i) {\n        const rule = description.rules[i];\n\n        if (rule.name === 'has') {\n          rule.arg = rule.arg.describe();\n        }\n      }\n    }\n\n    return description;\n  }\n\n  items(...schemas) {\n    const obj = this.clone();\n    Hoek.flatten(schemas).forEach((type, index) => {\n      try {\n        type = Cast.schema(this._currentJoi, type);\n      } catch (castErr) {\n        if (castErr.hasOwnProperty('path')) {\n          castErr.path = index + '.' + castErr.path;\n        } else {\n          castErr.path = index;\n        }\n\n        castErr.message = `${castErr.message}(${castErr.path})`;\n        throw castErr;\n      }\n\n      obj._inner.items.push(type);\n\n      if (type._flags.presence === 'required') {\n        obj._inner.requireds.push(type);\n      } else if (type._flags.presence === 'forbidden') {\n        obj._inner.exclusions.push(type.optional());\n      } else {\n        obj._inner.inclusions.push(type);\n      }\n    });\n    return obj;\n  }\n\n  ordered(...schemas) {\n    const obj = this.clone();\n    Hoek.flatten(schemas).forEach((type, index) => {\n      try {\n        type = Cast.schema(this._currentJoi, type);\n      } catch (castErr) {\n        if (castErr.hasOwnProperty('path')) {\n          castErr.path = index + '.' + castErr.path;\n        } else {\n          castErr.path = index;\n        }\n\n        castErr.message = `${castErr.message}(${castErr.path})`;\n        throw castErr;\n      }\n\n      obj._inner.ordereds.push(type);\n    });\n    return obj;\n  }\n\n  min(limit) {\n    const isRef = Ref.isRef(limit);\n    Hoek.assert(Number.isSafeInteger(limit) && limit >= 0 || isRef, 'limit must be a positive integer or reference');\n    return this._testUnique('min', limit, function (value, state, options) {\n      let compareTo;\n\n      if (isRef) {\n        compareTo = limit(state.reference || state.parent, options);\n\n        if (!(Number.isSafeInteger(compareTo) && compareTo >= 0)) {\n          return this.createError('array.ref', {\n            ref: limit,\n            value: compareTo\n          }, state, options);\n        }\n      } else {\n        compareTo = limit;\n      }\n\n      if (value.length >= compareTo) {\n        return value;\n      }\n\n      return this.createError('array.min', {\n        limit,\n        value\n      }, state, options);\n    });\n  }\n\n  max(limit) {\n    const isRef = Ref.isRef(limit);\n    Hoek.assert(Number.isSafeInteger(limit) && limit >= 0 || isRef, 'limit must be a positive integer or reference');\n    return this._testUnique('max', limit, function (value, state, options) {\n      let compareTo;\n\n      if (isRef) {\n        compareTo = limit(state.reference || state.parent, options);\n\n        if (!(Number.isSafeInteger(compareTo) && compareTo >= 0)) {\n          return this.createError('array.ref', {\n            ref: limit.key\n          }, state, options);\n        }\n      } else {\n        compareTo = limit;\n      }\n\n      if (value.length <= compareTo) {\n        return value;\n      }\n\n      return this.createError('array.max', {\n        limit,\n        value\n      }, state, options);\n    });\n  }\n\n  length(limit) {\n    const isRef = Ref.isRef(limit);\n    Hoek.assert(Number.isSafeInteger(limit) && limit >= 0 || isRef, 'limit must be a positive integer or reference');\n    return this._testUnique('length', limit, function (value, state, options) {\n      let compareTo;\n\n      if (isRef) {\n        compareTo = limit(state.reference || state.parent, options);\n\n        if (!(Number.isSafeInteger(compareTo) && compareTo >= 0)) {\n          return this.createError('array.ref', {\n            ref: limit.key\n          }, state, options);\n        }\n      } else {\n        compareTo = limit;\n      }\n\n      if (value.length === compareTo) {\n        return value;\n      }\n\n      return this.createError('array.length', {\n        limit,\n        value\n      }, state, options);\n    });\n  }\n\n  has(schema) {\n    try {\n      schema = Cast.schema(this._currentJoi, schema);\n    } catch (castErr) {\n      if (castErr.hasOwnProperty('path')) {\n        castErr.message = `${castErr.message}(${castErr.path})`;\n      }\n\n      throw castErr;\n    }\n\n    return this._test('has', schema, function (value, state, options) {\n      const isValid = value.some((item, idx) => {\n        const localState = new State(idx, [...state.path, idx], state.key, state.reference);\n        return !schema._validate(item, localState, options).errors;\n      });\n\n      if (isValid) {\n        return value;\n      }\n\n      const patternLabel = schema._getLabel();\n\n      if (patternLabel) {\n        return this.createError('array.hasKnown', {\n          patternLabel\n        }, state, options);\n      }\n\n      return this.createError('array.hasUnknown', null, state, options);\n    });\n  }\n\n  unique(comparator, configs) {\n    Hoek.assert(comparator === undefined || typeof comparator === 'function' || typeof comparator === 'string', 'comparator must be a function or a string');\n    Hoek.assert(configs === undefined || typeof configs === 'object', 'configs must be an object');\n    const settings = {\n      ignoreUndefined: configs && configs.ignoreUndefined || false\n    };\n\n    if (typeof comparator === 'string') {\n      settings.path = comparator;\n    } else if (typeof comparator === 'function') {\n      settings.comparator = comparator;\n    }\n\n    return this._test('unique', settings, function (value, state, options) {\n      const found = {\n        string: Object.create(null),\n        number: Object.create(null),\n        undefined: Object.create(null),\n        boolean: Object.create(null),\n        object: new Map(),\n        function: new Map(),\n        custom: new Map()\n      };\n      const compare = settings.comparator || Hoek.deepEqual;\n      const ignoreUndefined = settings.ignoreUndefined;\n\n      for (let i = 0; i < value.length; ++i) {\n        const item = settings.path ? Hoek.reach(value[i], settings.path) : value[i];\n        const records = settings.comparator ? found.custom : found[typeof item]; // All available types are supported, so it's not possible to reach 100% coverage without ignoring this line.\n        // I still want to keep the test for future js versions with new types (eg. Symbol).\n\n        if (\n        /* $lab:coverage:off$ */\n        records\n        /* $lab:coverage:on$ */\n        ) {\n            if (records instanceof Map) {\n              const entries = records.entries();\n              let current;\n\n              while (!(current = entries.next()).done) {\n                if (compare(current.value[0], item)) {\n                  const localState = new State(state.key, [...state.path, i], state.parent, state.reference);\n                  const context = {\n                    pos: i,\n                    value: value[i],\n                    dupePos: current.value[1],\n                    dupeValue: value[current.value[1]]\n                  };\n\n                  if (settings.path) {\n                    context.path = settings.path;\n                  }\n\n                  return this.createError('array.unique', context, localState, options);\n                }\n              }\n\n              records.set(item, i);\n            } else {\n              if ((!ignoreUndefined || item !== undefined) && records[item] !== undefined) {\n                const localState = new State(state.key, [...state.path, i], state.parent, state.reference);\n                const context = {\n                  pos: i,\n                  value: value[i],\n                  dupePos: records[item],\n                  dupeValue: value[records[item]]\n                };\n\n                if (settings.path) {\n                  context.path = settings.path;\n                }\n\n                return this.createError('array.unique', context, localState, options);\n              }\n\n              records[item] = i;\n            }\n          }\n      }\n\n      return value;\n    });\n  }\n\n  sparse(enabled) {\n    const value = enabled === undefined ? true : !!enabled;\n\n    if (this._flags.sparse === value) {\n      return this;\n    }\n\n    const obj = this.clone();\n    obj._flags.sparse = value;\n    return obj;\n  }\n\n  single(enabled) {\n    const value = enabled === undefined ? true : !!enabled;\n\n    if (this._flags.single === value) {\n      return this;\n    }\n\n    const obj = this.clone();\n    obj._flags.single = value;\n    return obj;\n  }\n\n  _fillMissedErrors(errors, requireds, state, options) {\n    const knownMisses = [];\n    let unknownMisses = 0;\n\n    for (let i = 0; i < requireds.length; ++i) {\n      const label = requireds[i]._getLabel();\n\n      if (label) {\n        knownMisses.push(label);\n      } else {\n        ++unknownMisses;\n      }\n    }\n\n    if (knownMisses.length) {\n      if (unknownMisses) {\n        errors.push(this.createError('array.includesRequiredBoth', {\n          knownMisses,\n          unknownMisses\n        }, {\n          key: state.key,\n          path: state.path\n        }, options));\n      } else {\n        errors.push(this.createError('array.includesRequiredKnowns', {\n          knownMisses\n        }, {\n          key: state.key,\n          path: state.path\n        }, options));\n      }\n    } else {\n      errors.push(this.createError('array.includesRequiredUnknowns', {\n        unknownMisses\n      }, {\n        key: state.key,\n        path: state.path\n      }, options));\n    }\n  }\n\n  _fillOrderedErrors(errors, ordereds, state, options) {\n    const requiredOrdereds = [];\n\n    for (let i = 0; i < ordereds.length; ++i) {\n      const presence = Hoek.reach(ordereds[i], '_flags.presence');\n\n      if (presence === 'required') {\n        requiredOrdereds.push(ordereds[i]);\n      }\n    }\n\n    if (requiredOrdereds.length) {\n      this._fillMissedErrors(errors, requiredOrdereds, state, options);\n    }\n  }\n\n};\nmodule.exports = new internals.Array();","map":{"version":3,"sources":["C:/Users/Asus A455L/portfolio-rizky/portfolio2/client/node_modules/@hapi/joi/lib/types/array/index.js"],"names":["Bourne","require","Hoek","Any","Cast","Ref","State","internals","fastSplice","arr","i","pos","length","Array","constructor","_type","_inner","items","ordereds","inclusions","exclusions","requireds","_flags","sparse","_base","value","state","options","result","convert","test","parse","e","isArray","wasArray","single","errors","createError","slice","_checkItems","previousErrors","errored","il","item","isValid","key","path","localState","parent","reference","res","undefined","push","abortEarly","shift","j","_validate","ordered","strip","reason","limit","requiredChecks","jl","stripUnknown","arrays","inclusion","previousCheck","indexOf","_fillMissedErrors","_fillOrderedErrors","describe","description","orderedItems","rules","rule","name","arg","schemas","obj","clone","flatten","forEach","type","index","schema","_currentJoi","castErr","hasOwnProperty","message","presence","optional","min","isRef","assert","Number","isSafeInteger","_testUnique","compareTo","ref","max","has","_test","some","idx","patternLabel","_getLabel","unique","comparator","configs","settings","ignoreUndefined","found","string","Object","create","number","boolean","object","Map","function","custom","compare","deepEqual","reach","records","entries","current","next","done","context","dupePos","dupeValue","set","enabled","knownMisses","unknownMisses","label","requiredOrdereds","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Bourne = require('@hapi/bourne');\nconst Hoek = require('@hapi/hoek');\n\nconst Any = require('../any');\nconst Cast = require('../../cast');\nconst Ref = require('../../ref');\nconst State = require('../state');\n\n\nconst internals = {};\n\n\ninternals.fastSplice = function (arr, i) {\n\n    let pos = i;\n    while (pos < arr.length) {\n        arr[pos++] = arr[pos];\n    }\n\n    --arr.length;\n};\n\n\ninternals.Array = class extends Any {\n\n    constructor() {\n\n        super();\n        this._type = 'array';\n        this._inner.items = [];\n        this._inner.ordereds = [];\n        this._inner.inclusions = [];\n        this._inner.exclusions = [];\n        this._inner.requireds = [];\n        this._flags.sparse = false;\n    }\n\n    _base(value, state, options) {\n\n        const result = {\n            value\n        };\n\n        if (typeof value === 'string' &&\n            options.convert) {\n\n            if (value.length > 1 &&\n                (value[0] === '[' || /^\\s*\\[/.test(value))) {\n\n                try {\n                    result.value = Bourne.parse(value);\n                }\n                catch (e) { }\n            }\n        }\n\n        let isArray = Array.isArray(result.value);\n        const wasArray = isArray;\n        if (options.convert && this._flags.single && !isArray) {\n            result.value = [result.value];\n            isArray = true;\n        }\n\n        if (!isArray) {\n            result.errors = this.createError('array.base', null, state, options);\n            return result;\n        }\n\n        if (this._inner.inclusions.length ||\n            this._inner.exclusions.length ||\n            this._inner.requireds.length ||\n            this._inner.ordereds.length ||\n            !this._flags.sparse) {\n\n            // Clone the array so that we don't modify the original\n            if (wasArray) {\n                result.value = result.value.slice(0);\n            }\n\n            result.errors = this._checkItems(result.value, wasArray, state, options);\n\n            if (result.errors && wasArray && options.convert && this._flags.single) {\n\n                // Attempt a 2nd pass by putting the array inside one.\n                const previousErrors = result.errors;\n\n                result.value = [result.value];\n                result.errors = this._checkItems(result.value, wasArray, state, options);\n\n                if (result.errors) {\n\n                    // Restore previous errors and value since this didn't validate either.\n                    result.errors = previousErrors;\n                    result.value = result.value[0];\n                }\n            }\n        }\n\n        return result;\n    }\n\n    _checkItems(items, wasArray, state, options) {\n\n        const errors = [];\n        let errored;\n\n        const requireds = this._inner.requireds.slice();\n        const ordereds = this._inner.ordereds.slice();\n        const inclusions = [...this._inner.inclusions, ...requireds];\n\n        let il = items.length;\n        for (let i = 0; i < il; ++i) {\n            errored = false;\n            const item = items[i];\n            let isValid = false;\n            const key = wasArray ? i : state.key;\n            const path = wasArray ? [...state.path, i] : state.path;\n            const localState = new State(key, path, state.parent, state.reference);\n            let res;\n\n            // Sparse\n\n            if (!this._flags.sparse && item === undefined) {\n                errors.push(this.createError('array.sparse', null, { key: state.key, path: localState.path, pos: i }, options));\n\n                if (options.abortEarly) {\n                    return errors;\n                }\n\n                ordereds.shift();\n\n                continue;\n            }\n\n            // Exclusions\n\n            for (let j = 0; j < this._inner.exclusions.length; ++j) {\n                res = this._inner.exclusions[j]._validate(item, localState, {});                // Not passing options to use defaults\n\n                if (!res.errors) {\n                    errors.push(this.createError(wasArray ? 'array.excludes' : 'array.excludesSingle', { pos: i, value: item }, { key: state.key, path: localState.path }, options));\n                    errored = true;\n\n                    if (options.abortEarly) {\n                        return errors;\n                    }\n\n                    ordereds.shift();\n\n                    break;\n                }\n            }\n\n            if (errored) {\n                continue;\n            }\n\n            // Ordered\n            if (this._inner.ordereds.length) {\n                if (ordereds.length > 0) {\n                    const ordered = ordereds.shift();\n                    res = ordered._validate(item, localState, options);\n                    if (!res.errors) {\n                        if (ordered._flags.strip) {\n                            internals.fastSplice(items, i);\n                            --i;\n                            --il;\n                        }\n                        else if (!this._flags.sparse && res.value === undefined) {\n                            errors.push(this.createError('array.sparse', null, { key: state.key, path: localState.path, pos: i }, options));\n\n                            if (options.abortEarly) {\n                                return errors;\n                            }\n\n                            continue;\n                        }\n                        else {\n                            items[i] = res.value;\n                        }\n                    }\n                    else {\n                        errors.push(this.createError('array.ordered', { pos: i, reason: res.errors, value: item }, { key: state.key, path: localState.path }, options));\n                        if (options.abortEarly) {\n                            return errors;\n                        }\n                    }\n\n                    continue;\n                }\n                else if (!this._inner.items.length) {\n                    errors.push(this.createError('array.orderedLength', { pos: i, limit: this._inner.ordereds.length }, { key: state.key, path: localState.path }, options));\n                    if (options.abortEarly) {\n                        return errors;\n                    }\n\n                    continue;\n                }\n            }\n\n            // Requireds\n\n            const requiredChecks = [];\n            let jl = requireds.length;\n            for (let j = 0; j < jl; ++j) {\n                res = requiredChecks[j] = requireds[j]._validate(item, localState, options);\n                if (!res.errors) {\n                    items[i] = res.value;\n                    isValid = true;\n                    internals.fastSplice(requireds, j);\n                    --j;\n                    --jl;\n\n                    if (!this._flags.sparse && res.value === undefined) {\n                        errors.push(this.createError('array.sparse', null, { key: state.key, path: localState.path, pos: i }, options));\n\n                        if (options.abortEarly) {\n                            return errors;\n                        }\n                    }\n\n                    break;\n                }\n            }\n\n            if (isValid) {\n                continue;\n            }\n\n            // Inclusions\n\n            const stripUnknown = options.stripUnknown && !!options.stripUnknown.arrays || false;\n\n            jl = inclusions.length;\n            for (let j = 0; j < jl; ++j) {\n                const inclusion = inclusions[j];\n\n                // Avoid re-running requireds that already didn't match in the previous loop\n                const previousCheck = requireds.indexOf(inclusion);\n                if (previousCheck !== -1) {\n                    res = requiredChecks[previousCheck];\n                }\n                else {\n                    res = inclusion._validate(item, localState, options);\n\n                    if (!res.errors) {\n                        if (inclusion._flags.strip) {\n                            internals.fastSplice(items, i);\n                            --i;\n                            --il;\n                        }\n                        else if (!this._flags.sparse && res.value === undefined) {\n                            errors.push(this.createError('array.sparse', null, { key: state.key, path: localState.path, pos: i }, options));\n                            errored = true;\n                        }\n                        else {\n                            items[i] = res.value;\n                        }\n\n                        isValid = true;\n                        break;\n                    }\n                }\n\n                // Return the actual error if only one inclusion defined\n                if (jl === 1) {\n                    if (stripUnknown) {\n                        internals.fastSplice(items, i);\n                        --i;\n                        --il;\n                        isValid = true;\n                        break;\n                    }\n\n                    errors.push(this.createError(wasArray ? 'array.includesOne' : 'array.includesOneSingle', { pos: i, reason: res.errors, value: item }, { key: state.key, path: localState.path }, options));\n                    errored = true;\n\n                    if (options.abortEarly) {\n                        return errors;\n                    }\n\n                    break;\n                }\n            }\n\n            if (errored) {\n                continue;\n            }\n\n            if (this._inner.inclusions.length && !isValid) {\n                if (stripUnknown) {\n                    internals.fastSplice(items, i);\n                    --i;\n                    --il;\n                    continue;\n                }\n\n                errors.push(this.createError(wasArray ? 'array.includes' : 'array.includesSingle', { pos: i, value: item }, { key: state.key, path: localState.path }, options));\n\n                if (options.abortEarly) {\n                    return errors;\n                }\n            }\n        }\n\n        if (requireds.length) {\n            this._fillMissedErrors(errors, requireds, state, options);\n        }\n\n        if (ordereds.length) {\n            this._fillOrderedErrors(errors, ordereds, state, options);\n        }\n\n        return errors.length ? errors : null;\n    }\n\n    describe() {\n\n        const description = super.describe();\n\n        if (this._inner.ordereds.length) {\n            description.orderedItems = [];\n\n            for (let i = 0; i < this._inner.ordereds.length; ++i) {\n                description.orderedItems.push(this._inner.ordereds[i].describe());\n            }\n        }\n\n        if (this._inner.items.length) {\n            description.items = [];\n\n            for (let i = 0; i < this._inner.items.length; ++i) {\n                description.items.push(this._inner.items[i].describe());\n            }\n        }\n\n        if (description.rules) {\n            for (let i = 0; i < description.rules.length; ++i) {\n                const rule = description.rules[i];\n                if (rule.name === 'has') {\n                    rule.arg = rule.arg.describe();\n                }\n            }\n        }\n\n        return description;\n    }\n\n    items(...schemas) {\n\n        const obj = this.clone();\n\n        Hoek.flatten(schemas).forEach((type, index) => {\n\n            try {\n                type = Cast.schema(this._currentJoi, type);\n            }\n            catch (castErr) {\n                if (castErr.hasOwnProperty('path')) {\n                    castErr.path = index + '.' + castErr.path;\n                }\n                else {\n                    castErr.path = index;\n                }\n\n                castErr.message = `${castErr.message}(${castErr.path})`;\n                throw castErr;\n            }\n\n            obj._inner.items.push(type);\n\n            if (type._flags.presence === 'required') {\n                obj._inner.requireds.push(type);\n            }\n            else if (type._flags.presence === 'forbidden') {\n                obj._inner.exclusions.push(type.optional());\n            }\n            else {\n                obj._inner.inclusions.push(type);\n            }\n        });\n\n        return obj;\n    }\n\n    ordered(...schemas) {\n\n        const obj = this.clone();\n\n        Hoek.flatten(schemas).forEach((type, index) => {\n\n            try {\n                type = Cast.schema(this._currentJoi, type);\n            }\n            catch (castErr) {\n                if (castErr.hasOwnProperty('path')) {\n                    castErr.path = index + '.' + castErr.path;\n                }\n                else {\n                    castErr.path = index;\n                }\n\n                castErr.message = `${castErr.message}(${castErr.path})`;\n                throw castErr;\n            }\n\n            obj._inner.ordereds.push(type);\n        });\n\n        return obj;\n    }\n\n    min(limit) {\n\n        const isRef = Ref.isRef(limit);\n\n        Hoek.assert((Number.isSafeInteger(limit) && limit >= 0) || isRef, 'limit must be a positive integer or reference');\n\n        return this._testUnique('min', limit, function (value, state, options) {\n\n            let compareTo;\n            if (isRef) {\n                compareTo = limit(state.reference || state.parent, options);\n\n                if (!(Number.isSafeInteger(compareTo) && compareTo >= 0)) {\n                    return this.createError('array.ref', { ref: limit, value: compareTo }, state, options);\n                }\n            }\n            else {\n                compareTo = limit;\n            }\n\n            if (value.length >= compareTo) {\n                return value;\n            }\n\n            return this.createError('array.min', { limit, value }, state, options);\n        });\n    }\n\n    max(limit) {\n\n        const isRef = Ref.isRef(limit);\n\n        Hoek.assert((Number.isSafeInteger(limit) && limit >= 0) || isRef, 'limit must be a positive integer or reference');\n\n        return this._testUnique('max', limit, function (value, state, options) {\n\n            let compareTo;\n            if (isRef) {\n                compareTo = limit(state.reference || state.parent, options);\n\n                if (!(Number.isSafeInteger(compareTo) && compareTo >= 0)) {\n                    return this.createError('array.ref', { ref: limit.key }, state, options);\n                }\n            }\n            else {\n                compareTo = limit;\n            }\n\n            if (value.length <= compareTo) {\n                return value;\n            }\n\n            return this.createError('array.max', { limit, value }, state, options);\n        });\n    }\n\n    length(limit) {\n\n        const isRef = Ref.isRef(limit);\n\n        Hoek.assert((Number.isSafeInteger(limit) && limit >= 0) || isRef, 'limit must be a positive integer or reference');\n\n        return this._testUnique('length', limit, function (value, state, options) {\n\n            let compareTo;\n            if (isRef) {\n                compareTo = limit(state.reference || state.parent, options);\n\n                if (!(Number.isSafeInteger(compareTo) && compareTo >= 0)) {\n                    return this.createError('array.ref', { ref: limit.key }, state, options);\n                }\n            }\n            else {\n                compareTo = limit;\n            }\n\n            if (value.length === compareTo) {\n                return value;\n            }\n\n            return this.createError('array.length', { limit, value }, state, options);\n        });\n    }\n\n    has(schema) {\n\n        try {\n            schema = Cast.schema(this._currentJoi, schema);\n        }\n        catch (castErr) {\n            if (castErr.hasOwnProperty('path')) {\n                castErr.message = `${castErr.message}(${castErr.path})`;\n            }\n\n            throw castErr;\n        }\n\n        return this._test('has', schema, function (value, state, options) {\n\n            const isValid = value.some((item, idx) => {\n\n                const localState = new State(idx, [...state.path, idx], state.key, state.reference);\n                return !schema._validate(item, localState, options).errors;\n            });\n\n            if (isValid) {\n                return value;\n            }\n\n            const patternLabel = schema._getLabel();\n            if (patternLabel) {\n                return this.createError('array.hasKnown', { patternLabel }, state, options);\n            }\n\n            return this.createError('array.hasUnknown', null, state, options);\n        });\n    }\n\n    unique(comparator, configs) {\n\n        Hoek.assert(comparator === undefined ||\n            typeof comparator === 'function' ||\n            typeof comparator === 'string', 'comparator must be a function or a string');\n\n        Hoek.assert(configs === undefined ||\n            typeof configs === 'object', 'configs must be an object');\n\n        const settings = {\n            ignoreUndefined: (configs && configs.ignoreUndefined) || false\n        };\n\n\n        if (typeof comparator === 'string') {\n            settings.path = comparator;\n        }\n        else if (typeof comparator === 'function') {\n            settings.comparator = comparator;\n        }\n\n        return this._test('unique', settings, function (value, state, options) {\n\n            const found = {\n                string: Object.create(null),\n                number: Object.create(null),\n                undefined: Object.create(null),\n                boolean: Object.create(null),\n                object: new Map(),\n                function: new Map(),\n                custom: new Map()\n            };\n\n            const compare = settings.comparator || Hoek.deepEqual;\n            const ignoreUndefined = settings.ignoreUndefined;\n\n            for (let i = 0; i < value.length; ++i) {\n                const item = settings.path ? Hoek.reach(value[i], settings.path) : value[i];\n                const records = settings.comparator ? found.custom : found[typeof item];\n\n                // All available types are supported, so it's not possible to reach 100% coverage without ignoring this line.\n                // I still want to keep the test for future js versions with new types (eg. Symbol).\n                if (/* $lab:coverage:off$ */ records /* $lab:coverage:on$ */) {\n                    if (records instanceof Map) {\n                        const entries = records.entries();\n                        let current;\n                        while (!(current = entries.next()).done) {\n                            if (compare(current.value[0], item)) {\n                                const localState = new State(state.key, [...state.path, i], state.parent, state.reference);\n                                const context = {\n                                    pos: i,\n                                    value: value[i],\n                                    dupePos: current.value[1],\n                                    dupeValue: value[current.value[1]]\n                                };\n\n                                if (settings.path) {\n                                    context.path = settings.path;\n                                }\n\n                                return this.createError('array.unique', context, localState, options);\n                            }\n                        }\n\n                        records.set(item, i);\n                    }\n                    else {\n                        if ((!ignoreUndefined || item !== undefined) && records[item] !== undefined) {\n                            const localState = new State(state.key, [...state.path, i], state.parent, state.reference);\n\n                            const context = {\n                                pos: i,\n                                value: value[i],\n                                dupePos: records[item],\n                                dupeValue: value[records[item]]\n                            };\n\n                            if (settings.path) {\n                                context.path = settings.path;\n                            }\n\n                            return this.createError('array.unique', context, localState, options);\n                        }\n\n                        records[item] = i;\n                    }\n                }\n            }\n\n            return value;\n        });\n    }\n\n    sparse(enabled) {\n\n        const value = enabled === undefined ? true : !!enabled;\n\n        if (this._flags.sparse === value) {\n            return this;\n        }\n\n        const obj = this.clone();\n        obj._flags.sparse = value;\n        return obj;\n    }\n\n    single(enabled) {\n\n        const value = enabled === undefined ? true : !!enabled;\n\n        if (this._flags.single === value) {\n            return this;\n        }\n\n        const obj = this.clone();\n        obj._flags.single = value;\n        return obj;\n    }\n\n    _fillMissedErrors(errors, requireds, state, options) {\n\n        const knownMisses = [];\n        let unknownMisses = 0;\n        for (let i = 0; i < requireds.length; ++i) {\n            const label = requireds[i]._getLabel();\n            if (label) {\n                knownMisses.push(label);\n            }\n            else {\n                ++unknownMisses;\n            }\n        }\n\n        if (knownMisses.length) {\n            if (unknownMisses) {\n                errors.push(this.createError('array.includesRequiredBoth', { knownMisses, unknownMisses }, { key: state.key, path: state.path }, options));\n            }\n            else {\n                errors.push(this.createError('array.includesRequiredKnowns', { knownMisses }, { key: state.key, path: state.path }, options));\n            }\n        }\n        else {\n            errors.push(this.createError('array.includesRequiredUnknowns', { unknownMisses }, { key: state.key, path: state.path }, options));\n        }\n    }\n\n\n    _fillOrderedErrors(errors, ordereds, state, options) {\n\n        const requiredOrdereds = [];\n\n        for (let i = 0; i < ordereds.length; ++i) {\n            const presence = Hoek.reach(ordereds[i], '_flags.presence');\n            if (presence === 'required') {\n                requiredOrdereds.push(ordereds[i]);\n            }\n        }\n\n        if (requiredOrdereds.length) {\n            this._fillMissedErrors(errors, requiredOrdereds, state, options);\n        }\n    }\n\n};\n\n\nmodule.exports = new internals.Array();\n"]},"metadata":{},"sourceType":"script"}