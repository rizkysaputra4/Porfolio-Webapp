{"ast":null,"code":"'use strict';\n\nconst Hoek = require('@hapi/hoek');\n\nconst Any = require('../any');\n\nconst internals = {};\ninternals.Binary = class extends Any {\n  constructor() {\n    super();\n    this._type = 'binary';\n  }\n\n  _base(value, state, options) {\n    const result = {\n      value\n    };\n\n    if (typeof value === 'string' && options.convert) {\n      try {\n        result.value = Buffer.from(value, this._flags.encoding);\n      } catch (e) {}\n    }\n\n    result.errors = Buffer.isBuffer(result.value) ? null : this.createError('binary.base', null, state, options);\n    return result;\n  }\n\n  encoding(encoding) {\n    Hoek.assert(Buffer.isEncoding(encoding), 'Invalid encoding:', encoding);\n\n    if (this._flags.encoding === encoding) {\n      return this;\n    }\n\n    const obj = this.clone();\n    obj._flags.encoding = encoding;\n    return obj;\n  }\n\n  min(limit) {\n    Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');\n    return this._test('min', limit, function (value, state, options) {\n      if (value.length >= limit) {\n        return value;\n      }\n\n      return this.createError('binary.min', {\n        limit,\n        value\n      }, state, options);\n    });\n  }\n\n  max(limit) {\n    Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');\n    return this._test('max', limit, function (value, state, options) {\n      if (value.length <= limit) {\n        return value;\n      }\n\n      return this.createError('binary.max', {\n        limit,\n        value\n      }, state, options);\n    });\n  }\n\n  length(limit) {\n    Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');\n    return this._test('length', limit, function (value, state, options) {\n      if (value.length === limit) {\n        return value;\n      }\n\n      return this.createError('binary.length', {\n        limit,\n        value\n      }, state, options);\n    });\n  }\n\n};\nmodule.exports = new internals.Binary();","map":{"version":3,"sources":["C:/Users/Asus A455L/portfolio-rizky/portfolio2/client/node_modules/@hapi/joi/lib/types/binary/index.js"],"names":["Hoek","require","Any","internals","Binary","constructor","_type","_base","value","state","options","result","convert","Buffer","from","_flags","encoding","e","errors","isBuffer","createError","assert","isEncoding","obj","clone","min","limit","Number","isSafeInteger","_test","length","max","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Hoek = require('@hapi/hoek');\n\nconst Any = require('../any');\n\n\nconst internals = {};\n\n\ninternals.Binary = class extends Any {\n\n    constructor() {\n\n        super();\n        this._type = 'binary';\n    }\n\n    _base(value, state, options) {\n\n        const result = {\n            value\n        };\n\n        if (typeof value === 'string' &&\n            options.convert) {\n\n            try {\n                result.value = Buffer.from(value, this._flags.encoding);\n            }\n            catch (e) { }\n        }\n\n        result.errors = Buffer.isBuffer(result.value) ? null : this.createError('binary.base', null, state, options);\n        return result;\n    }\n\n    encoding(encoding) {\n\n        Hoek.assert(Buffer.isEncoding(encoding), 'Invalid encoding:', encoding);\n\n        if (this._flags.encoding === encoding) {\n            return this;\n        }\n\n        const obj = this.clone();\n        obj._flags.encoding = encoding;\n        return obj;\n    }\n\n    min(limit) {\n\n        Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');\n\n        return this._test('min', limit, function (value, state, options) {\n\n            if (value.length >= limit) {\n                return value;\n            }\n\n            return this.createError('binary.min', { limit, value }, state, options);\n        });\n    }\n\n    max(limit) {\n\n        Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');\n\n        return this._test('max', limit, function (value, state, options) {\n\n            if (value.length <= limit) {\n                return value;\n            }\n\n            return this.createError('binary.max', { limit, value }, state, options);\n        });\n    }\n\n    length(limit) {\n\n        Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');\n\n        return this._test('length', limit, function (value, state, options) {\n\n            if (value.length === limit) {\n                return value;\n            }\n\n            return this.createError('binary.length', { limit, value }, state, options);\n        });\n    }\n\n};\n\n\nmodule.exports = new internals.Binary();\n"]},"metadata":{},"sourceType":"script"}